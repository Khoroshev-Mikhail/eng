{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const getAllGroupsThunk = createAsyncThunk('Thunk: getAllGroups', async function () {\n  const response = await fetch(`http://localhost:3002/groups/`); //Потом здесб добавить пагинацию\n  return await response.json();\n});\nconst initialState = [];\nexport const groupsSlice = createSlice({\n  name: 'Slice: groups',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getAllGroupsThunk.fulfilled, (_, action) => action.payload);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","createSlice","getAllGroupsThunk","response","fetch","json","initialState","groupsSlice","name","reducers","extraReducers","builder","addCase","fulfilled","_","action","payload"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/clientAPI/allGroupsSliceAPI.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { Group, GroupTitle } from '../types/types'\n\nexport const getAllGroupsThunk = createAsyncThunk<Group[]>(\n    'Thunk: getAllGroups',\n    async function() {\n        const response = await fetch(`http://localhost:3002/groups/`) //Потом здесб добавить пагинацию\n        return await response.json()\n    }\n)\n\nconst initialState: Group[] = []\n\nexport const groupsSlice = createSlice<Group[], {}>({\n    name: 'Slice: groups',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(getAllGroupsThunk.fulfilled, (_, action) => action.payload)\n    }\n})"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAGhE,OAAO,MAAMC,iBAAiB,GAAGF,gBAAgB,CAC7C,qBAAqB,EACrB,kBAAiB;EACb,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8B,CAAC,EAAC;EAC9D,OAAO,MAAMD,QAAQ,CAACE,IAAI,EAAE;AAChC,CAAC,CACJ;AAED,MAAMC,YAAqB,GAAG,EAAE;AAEhC,OAAO,MAAMC,WAAW,GAAGN,WAAW,CAAc;EAChDO,IAAI,EAAE,eAAe;EACrBF,YAAY;EACZG,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CAACC,OAAO,CAACV,iBAAiB,CAACW,SAAS,EAAE,CAACC,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC,OAAO,CAAC;EAC/E;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}