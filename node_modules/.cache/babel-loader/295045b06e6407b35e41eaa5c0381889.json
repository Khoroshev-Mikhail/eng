{"ast":null,"code":"var _jsxFileName = \"/Users/tatanaarhipova/MikeIT/eng/src/Components/Groups/GroupProgressWrapper.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { SERVER_URL } from \"../../app/variables/dbVariables\";\nimport GroupProgress from \"./GroupProgress\";\n\n/**\n * (HOC) Компонента для отображения прогресса изучения слов из группы слов принадлежащей к какому-либо тексту, видео или аудио.\n * @param props - all\n * @param props.all - необязательный. Если указан значит в прогрессе будут отображены progressbars для каждого метода изучения\n * @param props.id_group - необязательный. Если указан значит в прогрессе будут отображены progressbars для группы\n * @returns \n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function GroupProgressWrapper(props) {\n  _s();\n  const [id_group, setId_group] = useState(null);\n  useEffect(() => {\n    if (props.id_group) {\n      setId_group(props.id_group);\n    }\n    if (props.id_text || props.id_audio || props.id_video) {\n      let url = '';\n      if (props.id_text) {\n        url = `/texts/${props.id_text}/ref-id-group`;\n      } else if (props.id_audio) {\n        url = `/audios/${props.id_audio}/ref-id-group`;\n      } else if (props.id_video) {\n        url = `/videos/${props.id_video}/ref-id-group`;\n      }\n      fetch(SERVER_URL + url).then(response => {\n        return response.json();\n      }).then(response => {\n        if (response.id_group) {\n          setId_group(response.id_group);\n        }\n      }).catch(err => {\n        setId_group(null);\n      });\n    }\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(GroupProgress, {\n    all: props.all,\n    id_group: id_group\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 8\n  }, this);\n}\n_s(GroupProgressWrapper, \"GtGKW6TYeUlDE+cOOTcvE83YMwE=\");\n_c = GroupProgressWrapper;\nvar _c;\n$RefreshReg$(_c, \"GroupProgressWrapper\");","map":{"version":3,"names":["useEffect","useState","SERVER_URL","GroupProgress","GroupProgressWrapper","props","id_group","setId_group","id_text","id_audio","id_video","url","fetch","then","response","json","catch","err","all"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/Components/Groups/GroupProgressWrapper.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { SERVER_URL } from \"../../app/variables/dbVariables\";\nimport GroupProgress from \"./GroupProgress\";\n\n/**\n * (HOC) Компонента для отображения прогресса изучения слов из группы слов принадлежащей к какому-либо тексту, видео или аудио.\n * @param props - all\n * @param props.all - необязательный. Если указан значит в прогрессе будут отображены progressbars для каждого метода изучения\n * @param props.id_group - необязательный. Если указан значит в прогрессе будут отображены progressbars для группы\n * @returns \n */\nexport default function GroupProgressWrapper( props: { all?: boolean, id_group?: number, id_text?: number, id_audio?: number, id_video?: number} ){\n    const [id_group, setId_group] = useState<number | null>(null)\n    useEffect(()=>{\n        if(props.id_group){\n            setId_group(props.id_group)\n        }\n        \n        if(props.id_text || props.id_audio || props.id_video){\n            let url = ''\n            if(props.id_text){\n                url = `/texts/${props.id_text}/ref-id-group`\n            } else if(props.id_audio) {\n                url = `/audios/${props.id_audio}/ref-id-group`\n            } else if(props.id_video) {\n                url = `/videos/${props.id_video}/ref-id-group`\n            }\n            fetch(SERVER_URL + url)\n            .then( response => {\n                return response.json()\n            })\n            .then(response =>{\n                if(response.id_group){\n                    setId_group(response.id_group)\n                }\n            })\n            .catch(err => {\n                setId_group(null)\n            })\n        }\n        \n    }, [props])\n    return (\n       < GroupProgress all={props.all} id_group={id_group} />\n    )\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,UAAU,QAAQ,iCAAiC;AAC5D,OAAOC,aAAa,MAAM,iBAAiB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAOA,eAAe,SAASC,oBAAoB,CAAEC,KAAkG,EAAE;EAAA;EAC9I,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAgB,IAAI,CAAC;EAC7DD,SAAS,CAAC,MAAI;IACV,IAAGK,KAAK,CAACC,QAAQ,EAAC;MACdC,WAAW,CAACF,KAAK,CAACC,QAAQ,CAAC;IAC/B;IAEA,IAAGD,KAAK,CAACG,OAAO,IAAIH,KAAK,CAACI,QAAQ,IAAIJ,KAAK,CAACK,QAAQ,EAAC;MACjD,IAAIC,GAAG,GAAG,EAAE;MACZ,IAAGN,KAAK,CAACG,OAAO,EAAC;QACbG,GAAG,GAAI,UAASN,KAAK,CAACG,OAAQ,eAAc;MAChD,CAAC,MAAM,IAAGH,KAAK,CAACI,QAAQ,EAAE;QACtBE,GAAG,GAAI,WAAUN,KAAK,CAACI,QAAS,eAAc;MAClD,CAAC,MAAM,IAAGJ,KAAK,CAACK,QAAQ,EAAE;QACtBC,GAAG,GAAI,WAAUN,KAAK,CAACK,QAAS,eAAc;MAClD;MACAE,KAAK,CAACV,UAAU,GAAGS,GAAG,CAAC,CACtBE,IAAI,CAAEC,QAAQ,IAAI;QACf,OAAOA,QAAQ,CAACC,IAAI,EAAE;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACC,QAAQ,IAAG;QACb,IAAGA,QAAQ,CAACR,QAAQ,EAAC;UACjBC,WAAW,CAACO,QAAQ,CAACR,QAAQ,CAAC;QAClC;MACJ,CAAC,CAAC,CACDU,KAAK,CAACC,GAAG,IAAI;QACVV,WAAW,CAAC,IAAI,CAAC;MACrB,CAAC,CAAC;IACN;EAEJ,CAAC,EAAE,CAACF,KAAK,CAAC,CAAC;EACX,oBACG,QAAE,aAAa;IAAC,GAAG,EAAEA,KAAK,CAACa,GAAI;IAAC,QAAQ,EAAEZ;EAAS;IAAA;IAAA;IAAA;EAAA,QAAG;AAE7D;AAAC,GAlCuBF,oBAAoB;AAAA,KAApBA,oBAAoB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}