{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { groupsAPI } from './API/groupsAPI';\nimport { groupsSlice } from './API/groupsSliceAPI';\nimport { referencesSlice } from './API/referencesSlice';\nimport { textsAPI } from './API/textsAPI';\nimport { oneTextSlice, textsSlice } from './API/textSliceAPI';\nimport { userSlice } from './newApi/userAPI';\nimport { vocabularyAPI } from './API/vocabularyAPI';\nimport { wordsAPI } from './API/wordAPI';\nimport { vocabularySlice } from './newApi/vocabularyAPI';\nexport const store = configureStore({\n  reducer: {\n    [wordsAPI.reducerPath]: wordsAPI.reducer,\n    //Какнибудь представить разделение стора на админку и пользователя\n    [groupsAPI.reducerPath]: groupsAPI.reducer,\n    [vocabularyAPI.reducerPath]: vocabularyAPI.reducer,\n    [textsAPI.reducerPath]: textsAPI.reducer,\n    user: userSlice.reducer,\n    groups: groupsSlice.reducer,\n    texts: textsSlice.reducer,\n    oneText: oneTextSlice.reducer,\n    references: referencesSlice.reducer,\n    vocabulary: vocabularySlice.reducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware().concat(wordsAPI.middleware, groupsAPI.middleware, vocabularyAPI.middleware, textsAPI.middleware)\n});","map":{"version":3,"names":["configureStore","groupsAPI","groupsSlice","referencesSlice","textsAPI","oneTextSlice","textsSlice","userSlice","vocabularyAPI","wordsAPI","vocabularySlice","store","reducer","reducerPath","user","groups","texts","oneText","references","vocabulary","middleware","getDefaultMiddleware","concat"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/store.ts"],"sourcesContent":["import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport { groupsAPI } from './API/groupsAPI';\nimport { groupsSlice } from './API/groupsSliceAPI';\nimport { referencesSlice } from './API/referencesSlice';\nimport { textsAPI } from './API/textsAPI';\nimport { oneTextSlice, textsSlice } from './API/textSliceAPI';\nimport { userSlice } from './newApi/userAPI';\nimport { vocabularyAPI } from './API/vocabularyAPI';\nimport { wordsAPI } from './API/wordAPI';\nimport { vocabularySlice } from './newApi/vocabularyAPI';\n\nexport const store = configureStore({\n  reducer: {\n    [wordsAPI.reducerPath]: wordsAPI.reducer, //Какнибудь представить разделение стора на админку и пользователя\n    [groupsAPI.reducerPath]: groupsAPI.reducer,\n    [vocabularyAPI.reducerPath]: vocabularyAPI.reducer,\n    [textsAPI.reducerPath]: textsAPI.reducer,\n    user: userSlice.reducer,\n    groups: groupsSlice.reducer,\n    texts: textsSlice.reducer,\n    oneText: oneTextSlice.reducer,\n    references: referencesSlice.reducer,\n    vocabulary: vocabularySlice.reducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(\n      wordsAPI.middleware, \n      groupsAPI.middleware, \n      vocabularyAPI.middleware, \n      textsAPI.middleware\n    )\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n"],"mappings":"AAAA,SAASA,cAAc,QAA6B,kBAAkB;AACtE,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,eAAe,QAAQ,uBAAuB;AACvD,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,YAAY,EAAEC,UAAU,QAAQ,oBAAoB;AAC7D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,aAAa,QAAQ,qBAAqB;AACnD,SAASC,QAAQ,QAAQ,eAAe;AACxC,SAASC,eAAe,QAAQ,wBAAwB;AAExD,OAAO,MAAMC,KAAK,GAAGX,cAAc,CAAC;EAClCY,OAAO,EAAE;IACP,CAACH,QAAQ,CAACI,WAAW,GAAGJ,QAAQ,CAACG,OAAO;IAAE;IAC1C,CAACX,SAAS,CAACY,WAAW,GAAGZ,SAAS,CAACW,OAAO;IAC1C,CAACJ,aAAa,CAACK,WAAW,GAAGL,aAAa,CAACI,OAAO;IAClD,CAACR,QAAQ,CAACS,WAAW,GAAGT,QAAQ,CAACQ,OAAO;IACxCE,IAAI,EAAEP,SAAS,CAACK,OAAO;IACvBG,MAAM,EAAEb,WAAW,CAACU,OAAO;IAC3BI,KAAK,EAAEV,UAAU,CAACM,OAAO;IACzBK,OAAO,EAAEZ,YAAY,CAACO,OAAO;IAC7BM,UAAU,EAAEf,eAAe,CAACS,OAAO;IACnCO,UAAU,EAAET,eAAe,CAACE;EAC9B,CAAC;EACDQ,UAAU,EAAGC,oBAAoB,IAAKA,oBAAoB,EAAE,CAACC,MAAM,CAC/Db,QAAQ,CAACW,UAAU,EACnBnB,SAAS,CAACmB,UAAU,EACpBZ,aAAa,CAACY,UAAU,EACxBhB,QAAQ,CAACgB,UAAU;AAEzB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}