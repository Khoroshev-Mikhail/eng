{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const wordsAPI = createApi({\n  reducerPath: 'wordsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3002/'\n  }),\n  tagTypes: ['words'],\n  endpoints: builder => ({\n    getAllWords: builder.query({\n      query: () => `words`,\n      providesTags: result => result ? [...result.map(_ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          type: 'words',\n          id\n        };\n      }), {\n        type: 'words',\n        id: 'LIST'\n      }] : [{\n        type: 'words',\n        id: 'LIST'\n      }]\n    }),\n    getWordsByGroup: builder.query({\n      query: group => `words/group/${group}`,\n      providesTags: result => result ? [...result.map(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return {\n          type: 'words',\n          id\n        };\n      }), {\n        type: 'words',\n        id: 'LIST'\n      }] : [{\n        type: 'words',\n        id: 'LIST'\n      }],\n      transformResponse: resp => resp.sort((a, b) => a.eng.localeCompare(b.eng))\n    }),\n    setWord: builder.mutation({\n      query: body => ({\n        url: `words`,\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: ['words']\n    }),\n    putWord: builder.mutation({\n      query: body => ({\n        url: `words`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: ['words']\n    })\n  })\n});\nexport const {\n  useGetAllWordsQuery,\n  useSetWordMutation,\n  useGetWordsByGroupQuery,\n  usePutWordMutation\n} = wordsAPI;","map":{"version":3,"names":["createApi","fetchBaseQuery","wordsAPI","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getAllWords","query","providesTags","result","map","id","type","getWordsByGroup","group","transformResponse","resp","sort","a","b","eng","localeCompare","setWord","mutation","body","url","method","invalidatesTags","putWord","useGetAllWordsQuery","useSetWordMutation","useGetWordsByGroupQuery","usePutWordMutation"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/API/wordAPI.tsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Word } from '../types/types'\n\nexport const wordsAPI = createApi({\n    reducerPath: 'wordsApi',\n    baseQuery: fetchBaseQuery({baseUrl: 'http://localhost:3002/'}),\n    tagTypes: ['words'],\n    endpoints: (builder) => ({\n        getAllWords: builder.query<any, void>({\n            query: () =>  `words`,\n            providesTags: (result) =>\n                result\n                ? [\n                    ...result.map(({ id }: any) => ({ type: 'words', id })),\n                    { type: 'words', id: 'LIST' },\n                    ]\n                : [{ type: 'words', id: 'LIST' }], \n        }),\n        getWordsByGroup: builder.query<any, any>({\n            query: (group) =>  `words/group/${group}`,\n            providesTags: (result) =>\n                result\n                ? [\n                    ...result.map(({ id }: any) => ({ type: 'words', id })),\n                    { type: 'words', id: 'LIST' },\n                    ]\n                : [{ type: 'words', id: 'LIST' }], \n                transformResponse: (resp) => resp.sort((a: Word, b: Word) => a.eng.localeCompare(b.eng))\n        }),\n        setWord: builder.mutation<any, any>({\n            query: (body) => ({\n                url: `words`,\n                method: 'POST',\n                body\n            }),\n            invalidatesTags: ['words']\n        }),\n        putWord: builder.mutation<any, any>({\n            query: (body) => ({\n                url: `words`,\n                method: 'PUT',\n                body\n            }),\n            invalidatesTags: ['words']\n        }),\n    })\n})\n\nexport const { useGetAllWordsQuery, useSetWordMutation, useGetWordsByGroupQuery, usePutWordMutation } = wordsAPI"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAGxE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAC9BG,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEH,cAAc,CAAC;IAACI,OAAO,EAAE;EAAwB,CAAC,CAAC;EAC9DC,QAAQ,EAAE,CAAC,OAAO,CAAC;EACnBC,SAAS,EAAGC,OAAO,KAAM;IACrBC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAY;MAClCA,KAAK,EAAE,MAAQ,OAAM;MACrBC,YAAY,EAAGC,MAAM,IACjBA,MAAM,GACJ,CACE,GAAGA,MAAM,CAACC,GAAG,CAAC;QAAA,IAAC;UAAEC;QAAQ,CAAC;QAAA,OAAM;UAAEC,IAAI,EAAE,OAAO;UAAED;QAAG,CAAC;MAAA,CAAC,CAAC,EACvD;QAAEC,IAAI,EAAE,OAAO;QAAED,EAAE,EAAE;MAAO,CAAC,CAC5B,GACH,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAED,EAAE,EAAE;MAAO,CAAC;IACxC,CAAC,CAAC;IACFE,eAAe,EAAER,OAAO,CAACE,KAAK,CAAW;MACrCA,KAAK,EAAGO,KAAK,IAAO,eAAcA,KAAM,EAAC;MACzCN,YAAY,EAAGC,MAAM,IACjBA,MAAM,GACJ,CACE,GAAGA,MAAM,CAACC,GAAG,CAAC;QAAA,IAAC;UAAEC;QAAQ,CAAC;QAAA,OAAM;UAAEC,IAAI,EAAE,OAAO;UAAED;QAAG,CAAC;MAAA,CAAC,CAAC,EACvD;QAAEC,IAAI,EAAE,OAAO;QAAED,EAAE,EAAE;MAAO,CAAC,CAC5B,GACH,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAED,EAAE,EAAE;MAAO,CAAC,CAAC;MACjCI,iBAAiB,EAAGC,IAAI,IAAKA,IAAI,CAACC,IAAI,CAAC,CAACC,CAAO,EAAEC,CAAO,KAAKD,CAAC,CAACE,GAAG,CAACC,aAAa,CAACF,CAAC,CAACC,GAAG,CAAC;IAC/F,CAAC,CAAC;IACFE,OAAO,EAAEjB,OAAO,CAACkB,QAAQ,CAAW;MAChChB,KAAK,EAAGiB,IAAI,KAAM;QACdC,GAAG,EAAG,OAAM;QACZC,MAAM,EAAE,MAAM;QACdF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,OAAO;IAC7B,CAAC,CAAC;IACFC,OAAO,EAAEvB,OAAO,CAACkB,QAAQ,CAAW;MAChChB,KAAK,EAAGiB,IAAI,KAAM;QACdC,GAAG,EAAG,OAAM;QACZC,MAAM,EAAE,KAAK;QACbF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,OAAO;IAC7B,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEE,mBAAmB;EAAEC,kBAAkB;EAAEC,uBAAuB;EAAEC;AAAmB,CAAC,GAAGjC,QAAQ"},"metadata":{},"sourceType":"module"}