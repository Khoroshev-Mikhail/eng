{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const textsAPI = createApi({\n  reducerPath: 'textsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3002/texts',\n    prepareHeaders: headers => {\n      headers.set('Authorization', `Bearer Ara`);\n      return headers;\n    }\n  }),\n  tagTypes: ['texts'],\n  endpoints: builder => ({\n    getTexts: builder.query({\n      query: () => `/`,\n      providesTags: result => result ? [...result.map(_ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          type: 'texts',\n          id\n        };\n      }), {\n        type: 'texts',\n        id: 'LIST'\n      }] : [{\n        type: 'texts',\n        id: 'LIST'\n      }],\n      transformResponse: resp => resp.sort((a, b) => a.id - b.id)\n    }),\n    getTitleTexts: builder.query({\n      query: () => `/onlyTitles`\n    }),\n    setText: builder.mutation({\n      query: body => ({\n        url: `/`,\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: ['texts']\n    }),\n    deleteText: builder.mutation({\n      query: id => ({\n        url: `/`,\n        method: 'DELETE',\n        body: {\n          id\n        }\n      }),\n      invalidatesTags: ['texts']\n    }),\n    updateText: builder.mutation({\n      query: body => ({\n        url: `/`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: ['texts']\n    })\n  })\n});\nexport const {\n  useGetTextsQuery,\n  useGetTitleTextsQuery,\n  useSetTextMutation,\n  useDeleteTextMutation,\n  useUpdateTextMutation\n} = textsAPI;","map":{"version":3,"names":["createApi","fetchBaseQuery","textsAPI","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","set","tagTypes","endpoints","builder","getTexts","query","providesTags","result","map","id","type","transformResponse","resp","sort","a","b","getTitleTexts","setText","mutation","body","url","method","invalidatesTags","deleteText","updateText","useGetTextsQuery","useGetTitleTextsQuery","useSetTextMutation","useDeleteTextMutation","useUpdateTextMutation"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/API/textsAPI.tsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Text } from '../types/types'\nexport const textsAPI = createApi({\n    reducerPath: 'textsApi',\n    baseQuery: fetchBaseQuery({\n        baseUrl: 'http://localhost:3002/texts',\n        prepareHeaders: (headers: Headers) => {\n            headers.set('Authorization', `Bearer Ara`)\n            return headers\n        }\n    }),\n    tagTypes: ['texts'],\n    endpoints: (builder) => ({\n        getTexts: builder.query<Text[], void>({\n            query: () =>  `/`,\n            providesTags: (result) =>\n                result\n                ? [\n                    ...result.map(({ id }: any) => ({ type: 'texts' as const, id })),\n                    { type: 'texts', id: 'LIST' },\n                    ]\n                : [{ type: 'texts', id: 'LIST' }], \n            transformResponse: (resp: Text[]) => resp.sort((a: Text, b: Text) => a.id - b.id)\n        }),\n        getTitleTexts: builder.query<any, void>({\n            query: () =>  `/onlyTitles`,\n        }),\n        setText: builder.mutation<void, {title: string, img: string, text_body: string}>({\n            query: (body) => ({\n                url: `/`,\n                method: 'POST',\n                body\n            }),\n            invalidatesTags: ['texts']\n        }),\n        deleteText: builder.mutation<void, number>({\n            query: (id) => ({\n                url: `/`,\n                method: 'DELETE',\n                body: {id}\n            }),\n            invalidatesTags: ['texts']\n        }),\n        updateText: builder.mutation<void, {id: number, title: string, img: string, text_body: string}>({\n            query: (body) => ({\n                url: `/`,\n                method: 'PUT',\n                body\n            }),\n            invalidatesTags: ['texts']\n        })\n    })\n})\n\nexport const { useGetTextsQuery, useGetTitleTextsQuery, useSetTextMutation, useDeleteTextMutation, useUpdateTextMutation } = textsAPI"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAC9BG,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEH,cAAc,CAAC;IACtBI,OAAO,EAAE,6BAA6B;IACtCC,cAAc,EAAGC,OAAgB,IAAK;MAClCA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAG,YAAW,CAAC;MAC1C,OAAOD,OAAO;IAClB;EACJ,CAAC,CAAC;EACFE,QAAQ,EAAE,CAAC,OAAO,CAAC;EACnBC,SAAS,EAAGC,OAAO,KAAM;IACrBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAe;MAClCA,KAAK,EAAE,MAAQ,GAAE;MACjBC,YAAY,EAAGC,MAAM,IACjBA,MAAM,GACJ,CACE,GAAGA,MAAM,CAACC,GAAG,CAAC;QAAA,IAAC;UAAEC;QAAQ,CAAC;QAAA,OAAM;UAAEC,IAAI,EAAE,OAAgB;UAAED;QAAG,CAAC;MAAA,CAAC,CAAC,EAChE;QAAEC,IAAI,EAAE,OAAO;QAAED,EAAE,EAAE;MAAO,CAAC,CAC5B,GACH,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAED,EAAE,EAAE;MAAO,CAAC,CAAC;MACrCE,iBAAiB,EAAGC,IAAY,IAAKA,IAAI,CAACC,IAAI,CAAC,CAACC,CAAO,EAAEC,CAAO,KAAKD,CAAC,CAACL,EAAE,GAAGM,CAAC,CAACN,EAAE;IACpF,CAAC,CAAC;IACFO,aAAa,EAAEb,OAAO,CAACE,KAAK,CAAY;MACpCA,KAAK,EAAE,MAAQ;IACnB,CAAC,CAAC;IACFY,OAAO,EAAEd,OAAO,CAACe,QAAQ,CAAwD;MAC7Eb,KAAK,EAAGc,IAAI,KAAM;QACdC,GAAG,EAAG,GAAE;QACRC,MAAM,EAAE,MAAM;QACdF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,OAAO;IAC7B,CAAC,CAAC;IACFC,UAAU,EAAEpB,OAAO,CAACe,QAAQ,CAAe;MACvCb,KAAK,EAAGI,EAAE,KAAM;QACZW,GAAG,EAAG,GAAE;QACRC,MAAM,EAAE,QAAQ;QAChBF,IAAI,EAAE;UAACV;QAAE;MACb,CAAC,CAAC;MACFa,eAAe,EAAE,CAAC,OAAO;IAC7B,CAAC,CAAC;IACFE,UAAU,EAAErB,OAAO,CAACe,QAAQ,CAAoE;MAC5Fb,KAAK,EAAGc,IAAI,KAAM;QACdC,GAAG,EAAG,GAAE;QACRC,MAAM,EAAE,KAAK;QACbF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,OAAO;IAC7B,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG,gBAAgB;EAAEC,qBAAqB;EAAEC,kBAAkB;EAAEC,qBAAqB;EAAEC;AAAsB,CAAC,GAAGnC,QAAQ"},"metadata":{},"sourceType":"module"}