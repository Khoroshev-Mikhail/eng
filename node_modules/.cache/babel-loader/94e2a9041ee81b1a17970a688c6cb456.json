{"ast":null,"code":"export default function getGroupProgress(vocabulary, word_ids) {\n  const {\n    english,\n    russian,\n    spelling,\n    auding\n  } = vocabulary;\n  const count = word_ids.length;\n  const englishProgress = word_ids.filter(id => english.includes(id));\n  const russianProgress = word_ids.filter(id => russian.includes(id));\n  const spellingProgress = word_ids.filter(id => spelling.includes(id));\n  const audingProgress = word_ids.filter(id => auding.includes(id));\n  const totalProgress = word_ids.filter(id => englishProgress.includes(id) && russian.includes(id) && spelling.includes(id) && auding.includes(id));\n  return {\n    english: englishProgress.length / count * 100,\n    russian: russianProgress.length / count * 100,\n    spelling: spellingProgress.length / count * 100,\n    auding: audingProgress.length / count * 100,\n    total: totalProgress.length / count * 100\n  };\n}","map":{"version":3,"names":["getGroupProgress","vocabulary","word_ids","english","russian","spelling","auding","count","length","englishProgress","filter","id","includes","russianProgress","spellingProgress","audingProgress","totalProgress","total"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/fns/groupFns.ts"],"sourcesContent":["import { Vocabulary } from \"../types/types\";\n\nexport default function getGroupProgress(vocabulary: Vocabulary, word_ids: number[]){\n    const { english, russian, spelling, auding } = vocabulary\n    const count = word_ids.length\n    const englishProgress = word_ids.filter(id => english.includes(id))\n    const russianProgress = word_ids.filter(id => russian.includes(id))\n    const spellingProgress = word_ids.filter(id => spelling.includes(id))\n    const audingProgress = word_ids.filter(id => auding.includes(id))\n    const totalProgress = word_ids.filter(id => englishProgress.includes(id) && russian.includes(id) && spelling.includes(id) && auding.includes(id))\n    return { \n        english: englishProgress.length / count * 100,\n        russian: russianProgress.length / count * 100,\n        spelling: spellingProgress.length / count * 100,\n        auding: audingProgress.length / count * 100,\n        total: totalProgress.length / count * 100,\n    }\n}"],"mappings":"AAEA,eAAe,SAASA,gBAAgB,CAACC,UAAsB,EAAEC,QAAkB,EAAC;EAChF,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC,QAAQ;IAAEC;EAAO,CAAC,GAAGL,UAAU;EACzD,MAAMM,KAAK,GAAGL,QAAQ,CAACM,MAAM;EAC7B,MAAMC,eAAe,GAAGP,QAAQ,CAACQ,MAAM,CAACC,EAAE,IAAIR,OAAO,CAACS,QAAQ,CAACD,EAAE,CAAC,CAAC;EACnE,MAAME,eAAe,GAAGX,QAAQ,CAACQ,MAAM,CAACC,EAAE,IAAIP,OAAO,CAACQ,QAAQ,CAACD,EAAE,CAAC,CAAC;EACnE,MAAMG,gBAAgB,GAAGZ,QAAQ,CAACQ,MAAM,CAACC,EAAE,IAAIN,QAAQ,CAACO,QAAQ,CAACD,EAAE,CAAC,CAAC;EACrE,MAAMI,cAAc,GAAGb,QAAQ,CAACQ,MAAM,CAACC,EAAE,IAAIL,MAAM,CAACM,QAAQ,CAACD,EAAE,CAAC,CAAC;EACjE,MAAMK,aAAa,GAAGd,QAAQ,CAACQ,MAAM,CAACC,EAAE,IAAIF,eAAe,CAACG,QAAQ,CAACD,EAAE,CAAC,IAAIP,OAAO,CAACQ,QAAQ,CAACD,EAAE,CAAC,IAAIN,QAAQ,CAACO,QAAQ,CAACD,EAAE,CAAC,IAAIL,MAAM,CAACM,QAAQ,CAACD,EAAE,CAAC,CAAC;EACjJ,OAAO;IACHR,OAAO,EAAEM,eAAe,CAACD,MAAM,GAAGD,KAAK,GAAG,GAAG;IAC7CH,OAAO,EAAES,eAAe,CAACL,MAAM,GAAGD,KAAK,GAAG,GAAG;IAC7CF,QAAQ,EAAES,gBAAgB,CAACN,MAAM,GAAGD,KAAK,GAAG,GAAG;IAC/CD,MAAM,EAAES,cAAc,CAACP,MAAM,GAAGD,KAAK,GAAG,GAAG;IAC3CU,KAAK,EAAED,aAAa,CAACR,MAAM,GAAGD,KAAK,GAAG;EAC1C,CAAC;AACL"},"metadata":{},"sourceType":"module"}