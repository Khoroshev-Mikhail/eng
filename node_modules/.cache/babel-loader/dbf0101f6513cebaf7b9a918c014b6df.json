{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const groupsAPI = createApi({\n  reducerPath: 'groupsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3002/'\n  }),\n  tagTypes: ['groups'],\n  endpoints: builder => ({\n    getGroups: builder.query({\n      query: () => `groups`,\n      providesTags: result => result ? [...result.map(_ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          type: 'words',\n          id\n        };\n      }), {\n        type: 'groups',\n        id: 'LIST'\n      }] : [{\n        type: 'groups',\n        id: 'LIST'\n      }]\n    }),\n    setGroup: builder.mutation({\n      query: body => ({\n        url: `groups`,\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: ['groups']\n    }),\n    deleteGroup: builder.mutation({\n      query: id => ({\n        url: `groups`,\n        method: 'DELETE',\n        body: {\n          id\n        }\n      }),\n      invalidatesTags: ['groups']\n    }),\n    putGroup: builder.mutation({\n      query: body => ({\n        url: `groups`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: ['groups']\n    }),\n    addWordToGroup: builder.mutation({\n      query: body => ({\n        url: `addWordToGroup`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: ['groups']\n    }),\n    deleteWordFromGroup: builder.mutation({\n      query: body => ({\n        url: `deleteWordFromGroup`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: ['groups']\n    })\n  })\n});\nexport const {\n  useGetGroupsQuery,\n  useSetGroupMutation,\n  useDeleteGroupMutation,\n  usePutGroupMutation,\n  useAddWordToGroupMutation,\n  useDeleteWordFromGroupMutation\n} = groupsAPI;","map":{"version":3,"names":["createApi","fetchBaseQuery","groupsAPI","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getGroups","query","providesTags","result","map","id","type","setGroup","mutation","body","url","method","invalidatesTags","deleteGroup","putGroup","addWordToGroup","deleteWordFromGroup","useGetGroupsQuery","useSetGroupMutation","useDeleteGroupMutation","usePutGroupMutation","useAddWordToGroupMutation","useDeleteWordFromGroupMutation"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/API/groupsAPI.tsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const groupsAPI = createApi({\n    reducerPath: 'groupsApi',\n    baseQuery: fetchBaseQuery({baseUrl: 'http://localhost:3002/'}),\n    tagTypes: ['groups'],\n    endpoints: (builder) => ({\n        getGroups: builder.query<any, void>({\n            query: () =>  `groups`,\n            providesTags: (result) =>\n                result\n                ? [\n                    ...result.map(({ id }: any) => ({ type: 'words', id })),\n                    { type: 'groups', id: 'LIST' },\n                    ]\n                : [{ type: 'groups', id: 'LIST' }], \n        }),\n        setGroup: builder.mutation<any, any>({\n            query: (body) => ({\n                url: `groups`,\n                method: 'POST',\n                body\n            }),\n            invalidatesTags: ['groups']\n        }),\n        deleteGroup: builder.mutation<any, any>({\n            query: (id) => ({\n                url: `groups`,\n                method: 'DELETE',\n                body: {id}\n            }),\n            invalidatesTags: ['groups']\n        }),\n        putGroup: builder.mutation<any, any>({\n            query: (body) => ({\n                url: `groups`,\n                method: 'PUT',\n                body\n            }),\n            invalidatesTags: ['groups']\n        }),\n        addWordToGroup: builder.mutation<any, any>({\n            query: (body) => ({\n                url: `addWordToGroup`,\n                method: 'PUT',\n                body\n            }),\n            invalidatesTags: ['groups']\n        }),\n        deleteWordFromGroup: builder.mutation<any, any>({\n            query: (body) => ({\n                url: `deleteWordFromGroup`,\n                method: 'PUT',\n                body\n            }),\n            invalidatesTags: ['groups']\n        })\n    })\n})\n\nexport const { useGetGroupsQuery, useSetGroupMutation, useDeleteGroupMutation, usePutGroupMutation, useAddWordToGroupMutation, useDeleteWordFromGroupMutation } = groupsAPI"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAAC;EAC/BG,WAAW,EAAE,WAAW;EACxBC,SAAS,EAAEH,cAAc,CAAC;IAACI,OAAO,EAAE;EAAwB,CAAC,CAAC;EAC9DC,QAAQ,EAAE,CAAC,QAAQ,CAAC;EACpBC,SAAS,EAAGC,OAAO,KAAM;IACrBC,SAAS,EAAED,OAAO,CAACE,KAAK,CAAY;MAChCA,KAAK,EAAE,MAAQ,QAAO;MACtBC,YAAY,EAAGC,MAAM,IACjBA,MAAM,GACJ,CACE,GAAGA,MAAM,CAACC,GAAG,CAAC;QAAA,IAAC;UAAEC;QAAQ,CAAC;QAAA,OAAM;UAAEC,IAAI,EAAE,OAAO;UAAED;QAAG,CAAC;MAAA,CAAC,CAAC,EACvD;QAAEC,IAAI,EAAE,QAAQ;QAAED,EAAE,EAAE;MAAO,CAAC,CAC7B,GACH,CAAC;QAAEC,IAAI,EAAE,QAAQ;QAAED,EAAE,EAAE;MAAO,CAAC;IACzC,CAAC,CAAC;IACFE,QAAQ,EAAER,OAAO,CAACS,QAAQ,CAAW;MACjCP,KAAK,EAAGQ,IAAI,KAAM;QACdC,GAAG,EAAG,QAAO;QACbC,MAAM,EAAE,MAAM;QACdF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,QAAQ;IAC9B,CAAC,CAAC;IACFC,WAAW,EAAEd,OAAO,CAACS,QAAQ,CAAW;MACpCP,KAAK,EAAGI,EAAE,KAAM;QACZK,GAAG,EAAG,QAAO;QACbC,MAAM,EAAE,QAAQ;QAChBF,IAAI,EAAE;UAACJ;QAAE;MACb,CAAC,CAAC;MACFO,eAAe,EAAE,CAAC,QAAQ;IAC9B,CAAC,CAAC;IACFE,QAAQ,EAAEf,OAAO,CAACS,QAAQ,CAAW;MACjCP,KAAK,EAAGQ,IAAI,KAAM;QACdC,GAAG,EAAG,QAAO;QACbC,MAAM,EAAE,KAAK;QACbF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,QAAQ;IAC9B,CAAC,CAAC;IACFG,cAAc,EAAEhB,OAAO,CAACS,QAAQ,CAAW;MACvCP,KAAK,EAAGQ,IAAI,KAAM;QACdC,GAAG,EAAG,gBAAe;QACrBC,MAAM,EAAE,KAAK;QACbF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,QAAQ;IAC9B,CAAC,CAAC;IACFI,mBAAmB,EAAEjB,OAAO,CAACS,QAAQ,CAAW;MAC5CP,KAAK,EAAGQ,IAAI,KAAM;QACdC,GAAG,EAAG,qBAAoB;QAC1BC,MAAM,EAAE,KAAK;QACbF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,QAAQ;IAC9B,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEK,iBAAiB;EAAEC,mBAAmB;EAAEC,sBAAsB;EAAEC,mBAAmB;EAAEC,yBAAyB;EAAEC;AAA+B,CAAC,GAAG7B,SAAS"},"metadata":{},"sourceType":"module"}