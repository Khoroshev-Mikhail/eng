{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nconst user = {\n  id: 1,\n  //Если юзера нет базе тогда сервер возвращает ошибку, а на фронте показывает молодец ты выучил все слова\n  login: 'ara',\n  email: 'ara@ara.ru',\n  user_name: 'Ara Ararovich'\n};\nexport const userThunk = createAsyncThunk('userThunk', async function () {\n  const response = await fetch('http://localhost:3002/user', {\n    method: 'POST'\n  });\n  //Записать во время фуллфиелд в локалстораде через мидлвейр\n  const data = await response.json();\n  return data;\n});\nexport const userSlice = createSlice({\n  name: 'userSlice',\n  initialState: user,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(userThunk.fulfilled, (_, action) => action.payload);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","createSlice","user","id","login","email","user_name","userThunk","response","fetch","method","data","json","userSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","_","action","payload"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/API/userAPI.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Group } from '../types/types'\n\nexport type User = {\n    id: number,\n    email: string,\n    login: string,\n    user_name: string\n}\nconst user: User = {\n    id: 1, //Если юзера нет базе тогда сервер возвращает ошибку, а на фронте показывает молодец ты выучил все слова\n    login: 'ara',\n    email: 'ara@ara.ru',\n    user_name: 'Ara Ararovich'\n}\nexport const userThunk = createAsyncThunk(\n    'userThunk',\n    async function() {\n        const response = await fetch('http://localhost:3002/user', {\n            method: 'POST'\n        })\n        //Записать во время фуллфиелд в локалстораде через мидлвейр\n        const data: User = await response.json()\n        return data\n    }\n)\nexport const userSlice = createSlice({\n    name: 'userSlice',\n    initialState: user,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(userThunk.fulfilled, (_, action) => action.payload)\n    }\n})"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAUhE,MAAMC,IAAU,GAAG;EACfC,EAAE,EAAE,CAAC;EAAE;EACPC,KAAK,EAAE,KAAK;EACZC,KAAK,EAAE,YAAY;EACnBC,SAAS,EAAE;AACf,CAAC;AACD,OAAO,MAAMC,SAAS,GAAGP,gBAAgB,CACrC,WAAW,EACX,kBAAiB;EACb,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,EAAE;IACvDC,MAAM,EAAE;EACZ,CAAC,CAAC;EACF;EACA,MAAMC,IAAU,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;EACxC,OAAOD,IAAI;AACf,CAAC,CACJ;AACD,OAAO,MAAME,SAAS,GAAGZ,WAAW,CAAC;EACjCa,IAAI,EAAE,WAAW;EACjBC,YAAY,EAAEb,IAAI;EAClBc,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CAACC,OAAO,CAACZ,SAAS,CAACa,SAAS,EAAE,CAACC,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC,OAAO,CAAC;EACvE;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}