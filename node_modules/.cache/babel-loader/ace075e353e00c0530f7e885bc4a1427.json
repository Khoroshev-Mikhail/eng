{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const getAllGlobalTextsTitlesThunk = createAsyncThunk('Thunk: getAllGlobalTextTitles', async function () {\n  const response = await fetch(`http://localhost:3002/texts/titles`);\n  const data = await response.json();\n  return data;\n});\nconst initialState = [];\nexport const textsSlice = createSlice({\n  name: 'textsSlice',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getAllGlobalTextsTitlesThunk.fulfilled, (_, action) => action.payload);\n  }\n});\nexport const getOneText = createAsyncThunk('Thunk: getOneText', async function (id) {\n  const response = await fetch(`http://localhost:3002/texts/${id}`);\n  const data = await response.json();\n  return data;\n});\nexport const oneTextSlice = createSlice({\n  name: 'oneTextSlice',\n  initialState: {},\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getOneText.fulfilled, (_, action) => action.payload);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","createSlice","getAllGlobalTextsTitlesThunk","response","fetch","data","json","initialState","textsSlice","name","reducers","extraReducers","builder","addCase","fulfilled","_","action","payload","getOneText","id","oneTextSlice"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/API/textSliceAPI.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { Text, TextTitle } from '../types/types'\n\nexport const getAllGlobalTextsTitlesThunk = createAsyncThunk<TextTitle[]>(\n    'Thunk: getAllGlobalTextTitles',\n    async function() {\n        const response = await fetch(`http://localhost:3002/texts/titles`)\n        const data = await response.json()\n        return data\n    }\n)\n\nconst initialState: TextTitle[] = []\nexport const textsSlice = createSlice({\n    name: 'textsSlice',\n    initialState: initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(getAllGlobalTextsTitlesThunk.fulfilled, (_, action) => action.payload)\n    }\n})\nexport const getOneText = createAsyncThunk<Text[], number>(\n    'Thunk: getOneText',\n    async function(id: number) {\n        const response = await fetch(`http://localhost:3002/texts/${id}`)\n        const data = await response.json()\n        return data\n    }\n)\nexport const oneTextSlice = createSlice({\n    name: 'oneTextSlice',\n    initialState: {},\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(getOneText.fulfilled, (_, action) => action.payload)\n    }\n})"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAGhE,OAAO,MAAMC,4BAA4B,GAAGF,gBAAgB,CACxD,+BAA+B,EAC/B,kBAAiB;EACb,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,oCAAmC,CAAC;EAClE,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAClC,OAAOD,IAAI;AACf,CAAC,CACJ;AAED,MAAME,YAAyB,GAAG,EAAE;AACpC,OAAO,MAAMC,UAAU,GAAGP,WAAW,CAAC;EAClCQ,IAAI,EAAE,YAAY;EAClBF,YAAY,EAAEA,YAAY;EAC1BG,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CAACC,OAAO,CAACX,4BAA4B,CAACY,SAAS,EAAE,CAACC,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC,OAAO,CAAC;EAC1F;AACJ,CAAC,CAAC;AACF,OAAO,MAAMC,UAAU,GAAGlB,gBAAgB,CACtC,mBAAmB,EACnB,gBAAemB,EAAU,EAAE;EACvB,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAE,+BAA8Be,EAAG,EAAC,CAAC;EACjE,MAAMd,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAClC,OAAOD,IAAI;AACf,CAAC,CACJ;AACD,OAAO,MAAMe,YAAY,GAAGnB,WAAW,CAAC;EACpCQ,IAAI,EAAE,cAAc;EACpBF,YAAY,EAAE,CAAC,CAAC;EAChBG,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CAACC,OAAO,CAACK,UAAU,CAACJ,SAAS,EAAE,CAACC,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC,OAAO,CAAC;EACxE;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module"}