{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nimport { REFRESH_TOKEN, TOKEN } from '../variables/localStorageVariables';\nexport const wordsAPI = createApi({\n  reducerPath: 'wordsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3002/words',\n    prepareHeaders: headers => {\n      headers.set('Authorization', `Bearer ${localStorage.getItem(TOKEN) || 'unknown'} ${localStorage.getItem(REFRESH_TOKEN) || 'unknown'}`);\n      return headers;\n    }\n  }),\n  tagTypes: ['words'],\n  endpoints: builder => ({\n    getAllWords: builder.query({\n      query: () => `/`,\n      providesTags: result => result ? [...result.map(_ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          type: 'words',\n          id\n        };\n      }), {\n        type: 'words',\n        id: 'LIST'\n      }] : [{\n        type: 'words',\n        id: 'LIST'\n      }],\n      transformResponse: resp => resp.sort((a, b) => a.id - b.id)\n    }),\n    getWordsByGroup: builder.query({\n      query: group => `/group/${group}`,\n      providesTags: result => result ? [...result.map(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return {\n          type: 'words',\n          id\n        };\n      }), {\n        type: 'words',\n        id: 'LIST'\n      }] : [{\n        type: 'words',\n        id: 'LIST'\n      }]\n    }),\n    setWord: builder.mutation({\n      //Надо установить npm install --save @types/formdata\n      query: body => ({\n        url: `/`,\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: ['words']\n    }),\n    putWord: builder.mutation({\n      query: body => ({\n        url: `/`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: ['words']\n    }),\n    deleteWord: builder.mutation({\n      query: id => ({\n        url: `/`,\n        method: 'DELETE',\n        body: {\n          id\n        }\n      }),\n      invalidatesTags: ['words']\n    })\n  })\n});\nexport const {\n  useGetAllWordsQuery,\n  useSetWordMutation,\n  useGetWordsByGroupQuery,\n  usePutWordMutation,\n  useDeleteWordMutation\n} = wordsAPI;","map":{"version":3,"names":["createApi","fetchBaseQuery","REFRESH_TOKEN","TOKEN","wordsAPI","reducerPath","baseQuery","baseUrl","prepareHeaders","headers","set","localStorage","getItem","tagTypes","endpoints","builder","getAllWords","query","providesTags","result","map","id","type","transformResponse","resp","sort","a","b","getWordsByGroup","group","setWord","mutation","body","url","method","invalidatesTags","putWord","deleteWord","useGetAllWordsQuery","useSetWordMutation","useGetWordsByGroupQuery","usePutWordMutation","useDeleteWordMutation"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/API/wordAPI.tsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Word } from '../types/types'\nimport { REFRESH_TOKEN, TOKEN } from '../variables/localStorageVariables'\n\nexport const wordsAPI = createApi({\n    reducerPath: 'wordsApi',\n    baseQuery: fetchBaseQuery({\n        baseUrl: 'http://localhost:3002/words',\n        prepareHeaders: (headers: Headers) => {\n            headers.set('Authorization', `Bearer ${localStorage.getItem(TOKEN) || 'unknown' } ${localStorage.getItem(REFRESH_TOKEN) || 'unknown'}`)\n            return headers\n        }\n    }),\n    tagTypes: ['words'],\n    endpoints: (builder) => ({\n        getAllWords: builder.query<Word[], void>({\n            query: () =>  `/`,\n            providesTags: (result) =>\n                result\n                ? [\n                    ...result.map(({ id }: any) => ({ type: 'words' as const, id })),\n                    { type: 'words', id: 'LIST' },\n                    ]\n                : [{ type: 'words', id: 'LIST' }],  \n                transformResponse: (resp: Word[]) => resp.sort((a: Word, b: Word) => a.id - b.id)\n        }),\n        getWordsByGroup: builder.query<Word[], number>({\n            query: (group) =>  `/group/${group}`,\n            providesTags: (result) =>\n                result\n                ? [\n                    ...result.map(({ id }: any) => ({ type: 'words' as const, id })),\n                    { type: 'words', id: 'LIST' },\n                    ]\n                : [{ type: 'words', id: 'LIST' }],\n        }),\n        setWord: builder.mutation<number, any>({ //Надо установить npm install --save @types/formdata\n            query: (body) => ({\n                url: `/`,\n                method: 'POST',\n                body\n            }),\n            invalidatesTags: ['words']\n        }),\n        putWord: builder.mutation<void, any>({\n            query: (body) => ({\n                url: `/`,\n                method: 'PUT',\n                body\n            }),\n            invalidatesTags: ['words']\n        }),\n        deleteWord: builder.mutation<void, number>({\n            query: (id) => ({\n                url: `/`,\n                method: 'DELETE',\n                body: {id}\n            }),\n            invalidatesTags: ['words']\n        })\n    })\n})\n\nexport const { useGetAllWordsQuery, useSetWordMutation, useGetWordsByGroupQuery, usePutWordMutation, useDeleteWordMutation } = wordsAPI"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,SAASC,aAAa,EAAEC,KAAK,QAAQ,oCAAoC;AAEzE,OAAO,MAAMC,QAAQ,GAAGJ,SAAS,CAAC;EAC9BK,WAAW,EAAE,UAAU;EACvBC,SAAS,EAAEL,cAAc,CAAC;IACtBM,OAAO,EAAE,6BAA6B;IACtCC,cAAc,EAAGC,OAAgB,IAAK;MAClCA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAG,UAASC,YAAY,CAACC,OAAO,CAACT,KAAK,CAAC,IAAI,SAAW,IAAGQ,YAAY,CAACC,OAAO,CAACV,aAAa,CAAC,IAAI,SAAU,EAAC,CAAC;MACvI,OAAOO,OAAO;IAClB;EACJ,CAAC,CAAC;EACFI,QAAQ,EAAE,CAAC,OAAO,CAAC;EACnBC,SAAS,EAAGC,OAAO,KAAM;IACrBC,WAAW,EAAED,OAAO,CAACE,KAAK,CAAe;MACrCA,KAAK,EAAE,MAAQ,GAAE;MACjBC,YAAY,EAAGC,MAAM,IACjBA,MAAM,GACJ,CACE,GAAGA,MAAM,CAACC,GAAG,CAAC;QAAA,IAAC;UAAEC;QAAQ,CAAC;QAAA,OAAM;UAAEC,IAAI,EAAE,OAAgB;UAAED;QAAG,CAAC;MAAA,CAAC,CAAC,EAChE;QAAEC,IAAI,EAAE,OAAO;QAAED,EAAE,EAAE;MAAO,CAAC,CAC5B,GACH,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAED,EAAE,EAAE;MAAO,CAAC,CAAC;MACjCE,iBAAiB,EAAGC,IAAY,IAAKA,IAAI,CAACC,IAAI,CAAC,CAACC,CAAO,EAAEC,CAAO,KAAKD,CAAC,CAACL,EAAE,GAAGM,CAAC,CAACN,EAAE;IACxF,CAAC,CAAC;IACFO,eAAe,EAAEb,OAAO,CAACE,KAAK,CAAiB;MAC3CA,KAAK,EAAGY,KAAK,IAAO,UAASA,KAAM,EAAC;MACpCX,YAAY,EAAGC,MAAM,IACjBA,MAAM,GACJ,CACE,GAAGA,MAAM,CAACC,GAAG,CAAC;QAAA,IAAC;UAAEC;QAAQ,CAAC;QAAA,OAAM;UAAEC,IAAI,EAAE,OAAgB;UAAED;QAAG,CAAC;MAAA,CAAC,CAAC,EAChE;QAAEC,IAAI,EAAE,OAAO;QAAED,EAAE,EAAE;MAAO,CAAC,CAC5B,GACH,CAAC;QAAEC,IAAI,EAAE,OAAO;QAAED,EAAE,EAAE;MAAO,CAAC;IACxC,CAAC,CAAC;IACFS,OAAO,EAAEf,OAAO,CAACgB,QAAQ,CAAc;MAAE;MACrCd,KAAK,EAAGe,IAAI,KAAM;QACdC,GAAG,EAAG,GAAE;QACRC,MAAM,EAAE,MAAM;QACdF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,OAAO;IAC7B,CAAC,CAAC;IACFC,OAAO,EAAErB,OAAO,CAACgB,QAAQ,CAAY;MACjCd,KAAK,EAAGe,IAAI,KAAM;QACdC,GAAG,EAAG,GAAE;QACRC,MAAM,EAAE,KAAK;QACbF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC,OAAO;IAC7B,CAAC,CAAC;IACFE,UAAU,EAAEtB,OAAO,CAACgB,QAAQ,CAAe;MACvCd,KAAK,EAAGI,EAAE,KAAM;QACZY,GAAG,EAAG,GAAE;QACRC,MAAM,EAAE,QAAQ;QAChBF,IAAI,EAAE;UAACX;QAAE;MACb,CAAC,CAAC;MACFc,eAAe,EAAE,CAAC,OAAO;IAC7B,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG,mBAAmB;EAAEC,kBAAkB;EAAEC,uBAAuB;EAAEC,kBAAkB;EAAEC;AAAsB,CAAC,GAAGtC,QAAQ"},"metadata":{},"sourceType":"module"}