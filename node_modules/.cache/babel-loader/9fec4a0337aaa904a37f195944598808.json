{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  english: [],\n  russian: [],\n  spelling: [],\n  auding: []\n};\nexport const getVocabularyThunk = createAsyncThunk('Thunk: getVocabulary', async function (_, thunkAPI) {\n  const {\n    user\n  } = thunkAPI.getState();\n  const response = await fetch(`http://localhost:3002/vocabulary/${user.id}`);\n  const data = await response.json();\n  return data;\n});\nexport const vocabularySlice = createSlice({\n  name: 'Slice: Vocabulary',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getVocabularyThunk.fulfilled, (_, action) => action.payload);\n    builder.addCase(getVocabularyThunk.rejected, (_, __) => initialState);\n  }\n});\nexport const english = state => state.vocabulary.english;\nexport const russian = state => state.vocabulary.russian;\nexport const spelling = state => state.vocabulary.spelling;\nexport const auding = state => state.vocabulary.auding;","map":{"version":3,"names":["createAsyncThunk","createSlice","initialState","english","russian","spelling","auding","getVocabularyThunk","_","thunkAPI","user","getState","response","fetch","id","data","json","vocabularySlice","name","reducers","extraReducers","builder","addCase","fulfilled","action","payload","rejected","__","state","vocabulary"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/newApi/vocabularyAPI.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../store'\nimport { User } from '../types/types'\n\nexport type Vocabulary = {\n    english: number[],\n    russian: number[],\n    spelling:  number[],\n    auding: number[],\n}\nconst initialState: Vocabulary = {\n    english: [],\n    russian: [],\n    spelling: [],\n    auding: []\n}\nexport const getVocabularyThunk = createAsyncThunk<Vocabulary, void, { state: RootState }>(\n    'Thunk: getVocabulary',\n    async function(_, thunkAPI) {\n        const { user } = thunkAPI.getState() as { user: User}\n        const response = await fetch(`http://localhost:3002/vocabulary/${user.id}`)\n        const data = await response.json()\n        return data\n    }\n)\nexport const vocabularySlice = createSlice<Vocabulary, {}>({\n    name: 'Slice: Vocabulary',\n    initialState: initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(getVocabularyThunk.fulfilled, (_, action) => action.payload)\n        builder.addCase(getVocabularyThunk.rejected, (_, __) => initialState)\n    }\n})\n\nexport const english = (state: RootState) => state.vocabulary.english;\nexport const russian = (state: RootState) => state.vocabulary.russian;\nexport const spelling = (state: RootState) => state.vocabulary.spelling;\nexport const auding = (state: RootState) => state.vocabulary.auding;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAUhE,MAAMC,YAAwB,GAAG;EAC7BC,OAAO,EAAE,EAAE;EACXC,OAAO,EAAE,EAAE;EACXC,QAAQ,EAAE,EAAE;EACZC,MAAM,EAAE;AACZ,CAAC;AACD,OAAO,MAAMC,kBAAkB,GAAGP,gBAAgB,CAC9C,sBAAsB,EACtB,gBAAeQ,CAAC,EAAEC,QAAQ,EAAE;EACxB,MAAM;IAAEC;EAAK,CAAC,GAAGD,QAAQ,CAACE,QAAQ,EAAmB;EACrD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,oCAAmCH,IAAI,CAACI,EAAG,EAAC,CAAC;EAC3E,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;EAClC,OAAOD,IAAI;AACf,CAAC,CACJ;AACD,OAAO,MAAME,eAAe,GAAGhB,WAAW,CAAiB;EACvDiB,IAAI,EAAE,mBAAmB;EACzBhB,YAAY,EAAEA,YAAY;EAC1BiB,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CAACC,OAAO,CAACf,kBAAkB,CAACgB,SAAS,EAAE,CAACf,CAAC,EAAEgB,MAAM,KAAKA,MAAM,CAACC,OAAO,CAAC;IAC5EJ,OAAO,CAACC,OAAO,CAACf,kBAAkB,CAACmB,QAAQ,EAAE,CAAClB,CAAC,EAAEmB,EAAE,KAAKzB,YAAY,CAAC;EACzE;AACJ,CAAC,CAAC;AAEF,OAAO,MAAMC,OAAO,GAAIyB,KAAgB,IAAKA,KAAK,CAACC,UAAU,CAAC1B,OAAO;AACrE,OAAO,MAAMC,OAAO,GAAIwB,KAAgB,IAAKA,KAAK,CAACC,UAAU,CAACzB,OAAO;AACrE,OAAO,MAAMC,QAAQ,GAAIuB,KAAgB,IAAKA,KAAK,CAACC,UAAU,CAACxB,QAAQ;AACvE,OAAO,MAAMC,MAAM,GAAIsB,KAAgB,IAAKA,KAAK,CAACC,UAAU,CAACvB,MAAM"},"metadata":{},"sourceType":"module"}