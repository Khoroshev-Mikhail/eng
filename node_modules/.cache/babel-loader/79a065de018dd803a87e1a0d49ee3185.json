{"ast":null,"code":"var _jsxFileName = \"/Users/tatanaarhipova/MikeIT/eng/src/AdminComponents/AdminWords/AdminWordRowGroups.tsx\",\n  _s = $RefreshSig$();\nimport { Checkbox, Label } from \"flowbite-react\";\nimport { useAddWordToGroupMutation, useDeleteWordFromGroupMutation, useGetGroupsQuery } from \"../../app/API/groupsAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminWordsRowGroups(props) {\n  _s();\n  const {\n    data,\n    isSuccess\n  } = useGetGroupsQuery();\n  const [addWordToGroup] = useAddWordToGroupMutation();\n  const [deleteWordFromGroup] = useDeleteWordFromGroupMutation();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `p-2 col-span-11 gap-2 grid grid-cols-1`,\n    children: isSuccess && data.map((group, i) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: group.word_ids.includes(props.word_id),\n          onChange: group.word_ids.includes(props.word_id) ? () => {\n            deleteWordFromGroup({\n              id: group.id,\n              word_id: props.word_id\n            });\n          } : () => {\n            addWordToGroup({\n              id: group.id,\n              word_id: props.word_id\n            });\n          },\n          id: `groupCheckBox${i}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Label, {\n          htmlFor: `groupCheckBox${i}`,\n          children: [\" \", group.title_rus]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 29\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminWordsRowGroups, \"VFEuYOMmEUwK8hCB5GeWv8dgk8U=\", false, function () {\n  return [useGetGroupsQuery, useAddWordToGroupMutation, useDeleteWordFromGroupMutation];\n});\n_c = AdminWordsRowGroups;\nvar _c;\n$RefreshReg$(_c, \"AdminWordsRowGroups\");","map":{"version":3,"names":["Checkbox","Label","useAddWordToGroupMutation","useDeleteWordFromGroupMutation","useGetGroupsQuery","AdminWordsRowGroups","props","data","isSuccess","addWordToGroup","deleteWordFromGroup","map","group","i","word_ids","includes","word_id","id","title_rus"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/AdminComponents/AdminWords/AdminWordRowGroups.tsx"],"sourcesContent":["import { Checkbox, Label} from \"flowbite-react\"\nimport { useAddWordToGroupMutation, useDeleteWordFromGroupMutation, useGetGroupsQuery } from \"../../app/API/groupsAPI\"\nimport { Group } from \"../../app/types/types\"\n\nexport default function AdminWordsRowGroups(props: any){\n    const {data, isSuccess} = useGetGroupsQuery()\n    const [addWordToGroup] = useAddWordToGroupMutation()\n    const [deleteWordFromGroup] = useDeleteWordFromGroupMutation()\n    return (\n        <div className={`p-2 col-span-11 gap-2 grid grid-cols-1`}>\n            {isSuccess &&\n                data.map((group: Group, i: number) => {\n                    return (\n                        <div key={i}>\n                            <Checkbox\n                                checked={group.word_ids.includes(props.word_id)} \n                                onChange={group.word_ids.includes(props.word_id) \n                                    ? ()=>{deleteWordFromGroup({id: group.id, word_id: props.word_id})} \n                                    : ()=>{addWordToGroup({id: group.id, word_id: props.word_id})}\n                                }\n                                id={`groupCheckBox${i}`}\n                            /> \n                            <Label htmlFor={`groupCheckBox${i}`}> {group.title_rus}</Label>\n                        </div>\n                    )\n                })\n            }\n        </div>\n    )\n}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,KAAK,QAAO,gBAAgB;AAC/C,SAASC,yBAAyB,EAAEC,8BAA8B,EAAEC,iBAAiB,QAAQ,yBAAyB;AAAA;AAGtH,eAAe,SAASC,mBAAmB,CAACC,KAAU,EAAC;EAAA;EACnD,MAAM;IAACC,IAAI;IAAEC;EAAS,CAAC,GAAGJ,iBAAiB,EAAE;EAC7C,MAAM,CAACK,cAAc,CAAC,GAAGP,yBAAyB,EAAE;EACpD,MAAM,CAACQ,mBAAmB,CAAC,GAAGP,8BAA8B,EAAE;EAC9D,oBACI;IAAK,SAAS,EAAG,wCAAwC;IAAA,UACpDK,SAAS,IACND,IAAI,CAACI,GAAG,CAAC,CAACC,KAAY,EAAEC,CAAS,KAAK;MAClC,oBACI;QAAA,wBACI,QAAC,QAAQ;UACL,OAAO,EAAED,KAAK,CAACE,QAAQ,CAACC,QAAQ,CAACT,KAAK,CAACU,OAAO,CAAE;UAChD,QAAQ,EAAEJ,KAAK,CAACE,QAAQ,CAACC,QAAQ,CAACT,KAAK,CAACU,OAAO,CAAC,GAC1C,MAAI;YAACN,mBAAmB,CAAC;cAACO,EAAE,EAAEL,KAAK,CAACK,EAAE;cAAED,OAAO,EAAEV,KAAK,CAACU;YAAO,CAAC,CAAC;UAAA,CAAC,GACjE,MAAI;YAACP,cAAc,CAAC;cAACQ,EAAE,EAAEL,KAAK,CAACK,EAAE;cAAED,OAAO,EAAEV,KAAK,CAACU;YAAO,CAAC,CAAC;UAAA,CAChE;UACD,EAAE,EAAG,gBAAeH,CAAE;QAAE;UAAA;UAAA;UAAA;QAAA,QAC1B,eACF,QAAC,KAAK;UAAC,OAAO,EAAG,gBAAeA,CAAE,EAAE;UAAA,gBAAGD,KAAK,CAACM,SAAS;QAAA;UAAA;UAAA;UAAA;QAAA,QAAS;MAAA,GATzDL,CAAC;QAAA;QAAA;QAAA;MAAA,QAUL;IAEd,CAAC;EAAC;IAAA;IAAA;IAAA;EAAA,QAEJ;AAEd;AAAC,GAzBuBR,mBAAmB;EAAA,QACbD,iBAAiB,EAClBF,yBAAyB,EACpBC,8BAA8B;AAAA;AAAA,KAHxCE,mBAAmB;AAAA;AAAA"},"metadata":{},"sourceType":"module"}