{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const goodsApi = createApi({\n  reducerPath: 'goodsApi',\n  tagTypes: ['Products'],\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3001/'\n  }),\n  endpoints: build => ({\n    getGoods: build.query({\n      query: () => `goods`,\n      providesTags: result => result ? [...result.map(_ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          type: 'Products',\n          id\n        };\n      }), {\n        type: 'Products',\n        id: 'LIST'\n      }] : [{\n        type: 'Products',\n        id: 'LIST'\n      }]\n    }),\n    addProduct: build.mutation({\n      query: body => ({\n        url: `goods`,\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: [{\n        type: 'Products',\n        id: 'LIST'\n      }]\n    }),\n    deleteProduct: build.mutation({\n      query: id => ({\n        url: `goods/${id}`,\n        method: 'DELETE'\n      }),\n      invalidatesTags: [{\n        type: 'Products',\n        id: 'LIST'\n      }]\n    })\n  })\n});\nexport const {\n  useGetGoodsQuery,\n  useAddProductMutation,\n  useDeleteProductMutation\n} = goodsApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","goodsApi","reducerPath","tagTypes","baseQuery","baseUrl","endpoints","build","getGoods","query","providesTags","result","map","id","type","addProduct","mutation","body","url","method","invalidatesTags","deleteProduct","useGetGoodsQuery","useAddProductMutation","useDeleteProductMutation"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/goodsApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nexport const goodsApi = createApi({\n    reducerPath: 'goodsApi',\n    tagTypes: ['Products'],\n    baseQuery: fetchBaseQuery({baseUrl: 'http://localhost:3001/'}),\n    endpoints: (build) => ({\n        getGoods: build.query({\n            query: () => `goods`,\n            providesTags: (result) =>\n                result\n                ? [\n                    ...result.map(({ id }) => ({ type: 'Products', id })),\n                    { type: 'Products', id: 'LIST' },\n                    ]\n                : [{ type: 'Products', id: 'LIST' }],\n        }),\n        addProduct: build.mutation({\n            query: (body) => ({\n                url: `goods`,\n                method: 'POST',\n                body,\n            }),\n            invalidatesTags: [{type: 'Products', id: 'LIST'}]\n        }),\n        deleteProduct: build.mutation({\n            query: (id) => ({\n                url: `goods/${id}`,\n                method: 'DELETE'\n            }),\n            invalidatesTags: [{type: 'Products', id: 'LIST'}]\n        }),\n    })\n})\n\nexport const { useGetGoodsQuery, useAddProductMutation, useDeleteProductMutation } = goodsApi;"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAAC;EAC9BG,WAAW,EAAE,UAAU;EACvBC,QAAQ,EAAE,CAAC,UAAU,CAAC;EACtBC,SAAS,EAAEJ,cAAc,CAAC;IAACK,OAAO,EAAE;EAAwB,CAAC,CAAC;EAC9DC,SAAS,EAAGC,KAAK,KAAM;IACnBC,QAAQ,EAAED,KAAK,CAACE,KAAK,CAAC;MAClBA,KAAK,EAAE,MAAO,OAAM;MACpBC,YAAY,EAAGC,MAAM,IACjBA,MAAM,GACJ,CACE,GAAGA,MAAM,CAACC,GAAG,CAAC;QAAA,IAAC;UAAEC;QAAG,CAAC;QAAA,OAAM;UAAEC,IAAI,EAAE,UAAU;UAAED;QAAG,CAAC;MAAA,CAAC,CAAC,EACrD;QAAEC,IAAI,EAAE,UAAU;QAAED,EAAE,EAAE;MAAO,CAAC,CAC/B,GACH,CAAC;QAAEC,IAAI,EAAE,UAAU;QAAED,EAAE,EAAE;MAAO,CAAC;IAC3C,CAAC,CAAC;IACFE,UAAU,EAAER,KAAK,CAACS,QAAQ,CAAC;MACvBP,KAAK,EAAGQ,IAAI,KAAM;QACdC,GAAG,EAAG,OAAM;QACZC,MAAM,EAAE,MAAM;QACdF;MACJ,CAAC,CAAC;MACFG,eAAe,EAAE,CAAC;QAACN,IAAI,EAAE,UAAU;QAAED,EAAE,EAAE;MAAM,CAAC;IACpD,CAAC,CAAC;IACFQ,aAAa,EAAEd,KAAK,CAACS,QAAQ,CAAC;MAC1BP,KAAK,EAAGI,EAAE,KAAM;QACZK,GAAG,EAAG,SAAQL,EAAG,EAAC;QAClBM,MAAM,EAAE;MACZ,CAAC,CAAC;MACFC,eAAe,EAAE,CAAC;QAACN,IAAI,EAAE,UAAU;QAAED,EAAE,EAAE;MAAM,CAAC;IACpD,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EAAES,gBAAgB;EAAEC,qBAAqB;EAAEC;AAAyB,CAAC,GAAGvB,QAAQ"},"metadata":{},"sourceType":"module"}