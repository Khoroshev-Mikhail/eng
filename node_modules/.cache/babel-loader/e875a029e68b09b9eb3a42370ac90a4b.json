{"ast":null,"code":"const defaultProgress = {\n  english: 0,\n  russian: 0,\n  spelling: 0,\n  auding: 0,\n  total: 0\n};\nexport default function getGroupProgress(vocabulary, word_ids) {\n  const {\n    english,\n    russian,\n    spelling,\n    auding\n  } = vocabulary;\n  const count = word_ids.length;\n  const englishProgress = word_ids.filter(id => english.includes(id));\n  const russianProgress = word_ids.filter(id => russian.includes(id));\n  const spellingProgress = word_ids.filter(id => spelling.includes(id));\n  const audingProgress = word_ids.filter(id => auding.includes(id));\n  const totalProgress = word_ids.filter(id => englishProgress.includes(id) && russian.includes(id) && spelling.includes(id) && auding.includes(id));\n  return {\n    english: Math.round(englishProgress.length / count * 100),\n    russian: Math.round(russianProgress.length / count * 100),\n    spelling: Math.round(spellingProgress.length / count * 100),\n    auding: Math.round(audingProgress.length / count * 100),\n    total: Math.round(totalProgress.length / count * 100)\n  };\n}","map":{"version":3,"names":["defaultProgress","english","russian","spelling","auding","total","getGroupProgress","vocabulary","word_ids","count","length","englishProgress","filter","id","includes","russianProgress","spellingProgress","audingProgress","totalProgress","Math","round"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/fns/groupFns.ts"],"sourcesContent":["import { Vocabulary } from \"../types/types\";\n\nconst defaultProgress = {\n    english: 0,\n    russian: 0,\n    spelling: 0,\n    auding: 0,\n    total: 0,\n}\nexport default function getGroupProgress(vocabulary: Vocabulary, word_ids: number[]){\n    const { english, russian, spelling, auding } = vocabulary\n    const count = word_ids.length\n    const englishProgress = word_ids.filter(id => english.includes(id))\n    const russianProgress = word_ids.filter(id => russian.includes(id))\n    const spellingProgress = word_ids.filter(id => spelling.includes(id))\n    const audingProgress = word_ids.filter(id => auding.includes(id))\n    const totalProgress = word_ids.filter(id => englishProgress.includes(id) && russian.includes(id) && spelling.includes(id) && auding.includes(id))\n    return { \n        english: Math.round(englishProgress.length / count * 100),\n        russian: Math.round(russianProgress.length / count * 100),\n        spelling: Math.round(spellingProgress.length / count * 100),\n        auding: Math.round(audingProgress.length / count * 100),\n        total: Math.round(totalProgress.length / count * 100),\n    }\n}"],"mappings":"AAEA,MAAMA,eAAe,GAAG;EACpBC,OAAO,EAAE,CAAC;EACVC,OAAO,EAAE,CAAC;EACVC,QAAQ,EAAE,CAAC;EACXC,MAAM,EAAE,CAAC;EACTC,KAAK,EAAE;AACX,CAAC;AACD,eAAe,SAASC,gBAAgB,CAACC,UAAsB,EAAEC,QAAkB,EAAC;EAChF,MAAM;IAAEP,OAAO;IAAEC,OAAO;IAAEC,QAAQ;IAAEC;EAAO,CAAC,GAAGG,UAAU;EACzD,MAAME,KAAK,GAAGD,QAAQ,CAACE,MAAM;EAC7B,MAAMC,eAAe,GAAGH,QAAQ,CAACI,MAAM,CAACC,EAAE,IAAIZ,OAAO,CAACa,QAAQ,CAACD,EAAE,CAAC,CAAC;EACnE,MAAME,eAAe,GAAGP,QAAQ,CAACI,MAAM,CAACC,EAAE,IAAIX,OAAO,CAACY,QAAQ,CAACD,EAAE,CAAC,CAAC;EACnE,MAAMG,gBAAgB,GAAGR,QAAQ,CAACI,MAAM,CAACC,EAAE,IAAIV,QAAQ,CAACW,QAAQ,CAACD,EAAE,CAAC,CAAC;EACrE,MAAMI,cAAc,GAAGT,QAAQ,CAACI,MAAM,CAACC,EAAE,IAAIT,MAAM,CAACU,QAAQ,CAACD,EAAE,CAAC,CAAC;EACjE,MAAMK,aAAa,GAAGV,QAAQ,CAACI,MAAM,CAACC,EAAE,IAAIF,eAAe,CAACG,QAAQ,CAACD,EAAE,CAAC,IAAIX,OAAO,CAACY,QAAQ,CAACD,EAAE,CAAC,IAAIV,QAAQ,CAACW,QAAQ,CAACD,EAAE,CAAC,IAAIT,MAAM,CAACU,QAAQ,CAACD,EAAE,CAAC,CAAC;EACjJ,OAAO;IACHZ,OAAO,EAAEkB,IAAI,CAACC,KAAK,CAACT,eAAe,CAACD,MAAM,GAAGD,KAAK,GAAG,GAAG,CAAC;IACzDP,OAAO,EAAEiB,IAAI,CAACC,KAAK,CAACL,eAAe,CAACL,MAAM,GAAGD,KAAK,GAAG,GAAG,CAAC;IACzDN,QAAQ,EAAEgB,IAAI,CAACC,KAAK,CAACJ,gBAAgB,CAACN,MAAM,GAAGD,KAAK,GAAG,GAAG,CAAC;IAC3DL,MAAM,EAAEe,IAAI,CAACC,KAAK,CAACH,cAAc,CAACP,MAAM,GAAGD,KAAK,GAAG,GAAG,CAAC;IACvDJ,KAAK,EAAEc,IAAI,CAACC,KAAK,CAACF,aAAa,CAACR,MAAM,GAAGD,KAAK,GAAG,GAAG;EACxD,CAAC;AACL"},"metadata":{},"sourceType":"module"}