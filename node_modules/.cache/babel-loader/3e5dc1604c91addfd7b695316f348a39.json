{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const vocabularyAPI = createApi({\n  reducerPath: 'vocabularyApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3002/'\n  }),\n  tagTypes: ['vocabulary'],\n  endpoints: builder => ({\n    getVocabulary: builder.query({\n      query: id => `vocabulary/${id}`,\n      providesTags: (result, error, id) => [{\n        type: 'vocabulary',\n        id\n      }]\n    }),\n    getUnlerned: builder.query({\n      //может надо разбить на отдельные методы лучше\n      query: req => `/vocabulary/${req.userId}/unlerned/${req.method}/group/${req.groupId}`,\n      providesTags: (result, error, id) => [{\n        type: 'vocabulary',\n        id\n      }]\n    }),\n    getUnlernedSpell: builder.query({\n      //может надо разбить на отдельные методы лучше\n      query: req => `/vocabulary/${req.userId}/unlerned/spelling/group/${req.groupId}`,\n      providesTags: (result, error, id) => [{\n        type: 'vocabulary',\n        id\n      }],\n      transformResponse: resp => ({\n        ...resp,\n        eng: resp.eng.split('').sort(() => Math.random() - 0.5).join('')\n      })\n    }),\n    setVocabulary: builder.mutation({\n      query: body => ({\n        url: `vocabulary/${body.userId}/${body.method}`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: ['vocabulary']\n    }),\n    wrongAnswer: builder.mutation({\n      query: () => ({\n        url: `vocabulary/wrong`,\n        method: 'PUT'\n      }),\n      invalidatesTags: ['vocabulary']\n    }),\n    getGroupProgess: builder.query({\n      query: body => `groups/${body.groupId}/progress/${body.userId}`,\n      providesTags: ['vocabulary']\n    })\n  })\n});\nexport const {\n  useGetVocabularyQuery,\n  useSetVocabularyMutation,\n  useGetUnlernedQuery,\n  useGetUnlernedSpellQuery,\n  useWrongAnswerMutation,\n  useGetGroupProgessQuery\n} = vocabularyAPI;","map":{"version":3,"names":["createApi","fetchBaseQuery","vocabularyAPI","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getVocabulary","query","id","providesTags","result","error","type","getUnlerned","req","userId","method","groupId","getUnlernedSpell","transformResponse","resp","eng","split","sort","Math","random","join","setVocabulary","mutation","body","url","invalidatesTags","wrongAnswer","getGroupProgess","useGetVocabularyQuery","useSetVocabularyMutation","useGetUnlernedQuery","useGetUnlernedSpellQuery","useWrongAnswerMutation","useGetGroupProgessQuery"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/API/vocabularyAPI.tsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Word } from '../types/types'\n\nexport const vocabularyAPI = createApi({\n    reducerPath: 'vocabularyApi',\n    baseQuery: fetchBaseQuery({baseUrl: 'http://localhost:3002/'}),\n    tagTypes: ['vocabulary'],\n    endpoints: (builder) => ({\n        getVocabulary: builder.query<any, any>({\n            query: (id: any) =>  `vocabulary/${id}`,\n            providesTags: (result, error, id) => [{ type: 'vocabulary', id }],\n        }),\n        getUnlerned: builder.query<any, any>({ //может надо разбить на отдельные методы лучше\n            query: (req) =>  `/vocabulary/${req.userId}/unlerned/${req.method}/group/${req.groupId}`,\n            providesTags: (result, error, id) => [{ type: 'vocabulary', id }],\n        }),\n        getUnlernedSpell: builder.query<Word, any>({ //может надо разбить на отдельные методы лучше\n            query: (req) =>  `/vocabulary/${req.userId}/unlerned/spelling/group/${req.groupId}`,\n            providesTags: (result, error, id) => [{ type: 'vocabulary', id }],\n            transformResponse: (resp: Word) => ({...resp, eng: resp.eng.split('').sort(() => Math.random() - 0.5).join('')})\n        }),\n        setVocabulary: builder.mutation<any, any>({\n            query: (body) => ({\n                url: `vocabulary/${body.userId}/${body.method}`,\n                method: 'PUT',\n                body\n            }),\n            invalidatesTags: ['vocabulary']\n        }),\n        wrongAnswer: builder.mutation<any, any>({\n            query: () => ({\n                url: `vocabulary/wrong`,\n                method: 'PUT'\n            }),\n            invalidatesTags: ['vocabulary']\n        }),\n        getGroupProgess: builder.query<{english: number, russian: number, spelling: number, auding: number}, {groupId: number, userId: number}>({\n            query: (body) =>  `groups/${body.groupId}/progress/${body.userId}`,\n            providesTags: ['vocabulary'], \n        }),\n    })\n})\n\nexport const { useGetVocabularyQuery, useSetVocabularyMutation, useGetUnlernedQuery, useGetUnlernedSpellQuery, useWrongAnswerMutation, useGetGroupProgessQuery } = vocabularyAPI"],"mappings":"AAAA,SAASA,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAGxE,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAAC;EACnCG,WAAW,EAAE,eAAe;EAC5BC,SAAS,EAAEH,cAAc,CAAC;IAACI,OAAO,EAAE;EAAwB,CAAC,CAAC;EAC9DC,QAAQ,EAAE,CAAC,YAAY,CAAC;EACxBC,SAAS,EAAGC,OAAO,KAAM;IACrBC,aAAa,EAAED,OAAO,CAACE,KAAK,CAAW;MACnCA,KAAK,EAAGC,EAAO,IAAO,cAAaA,EAAG,EAAC;MACvCC,YAAY,EAAE,CAACC,MAAM,EAAEC,KAAK,EAAEH,EAAE,KAAK,CAAC;QAAEI,IAAI,EAAE,YAAY;QAAEJ;MAAG,CAAC;IACpE,CAAC,CAAC;IACFK,WAAW,EAAER,OAAO,CAACE,KAAK,CAAW;MAAE;MACnCA,KAAK,EAAGO,GAAG,IAAO,eAAcA,GAAG,CAACC,MAAO,aAAYD,GAAG,CAACE,MAAO,UAASF,GAAG,CAACG,OAAQ,EAAC;MACxFR,YAAY,EAAE,CAACC,MAAM,EAAEC,KAAK,EAAEH,EAAE,KAAK,CAAC;QAAEI,IAAI,EAAE,YAAY;QAAEJ;MAAG,CAAC;IACpE,CAAC,CAAC;IACFU,gBAAgB,EAAEb,OAAO,CAACE,KAAK,CAAY;MAAE;MACzCA,KAAK,EAAGO,GAAG,IAAO,eAAcA,GAAG,CAACC,MAAO,4BAA2BD,GAAG,CAACG,OAAQ,EAAC;MACnFR,YAAY,EAAE,CAACC,MAAM,EAAEC,KAAK,EAAEH,EAAE,KAAK,CAAC;QAAEI,IAAI,EAAE,YAAY;QAAEJ;MAAG,CAAC,CAAC;MACjEW,iBAAiB,EAAGC,IAAU,KAAM;QAAC,GAAGA,IAAI;QAAEC,GAAG,EAAED,IAAI,CAACC,GAAG,CAACC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,MAAMC,IAAI,CAACC,MAAM,EAAE,GAAG,GAAG,CAAC,CAACC,IAAI,CAAC,EAAE;MAAC,CAAC;IACnH,CAAC,CAAC;IACFC,aAAa,EAAEtB,OAAO,CAACuB,QAAQ,CAAW;MACtCrB,KAAK,EAAGsB,IAAI,KAAM;QACdC,GAAG,EAAG,cAAaD,IAAI,CAACd,MAAO,IAAGc,IAAI,CAACb,MAAO,EAAC;QAC/CA,MAAM,EAAE,KAAK;QACba;MACJ,CAAC,CAAC;MACFE,eAAe,EAAE,CAAC,YAAY;IAClC,CAAC,CAAC;IACFC,WAAW,EAAE3B,OAAO,CAACuB,QAAQ,CAAW;MACpCrB,KAAK,EAAE,OAAO;QACVuB,GAAG,EAAG,kBAAiB;QACvBd,MAAM,EAAE;MACZ,CAAC,CAAC;MACFe,eAAe,EAAE,CAAC,YAAY;IAClC,CAAC,CAAC;IACFE,eAAe,EAAE5B,OAAO,CAACE,KAAK,CAA0G;MACpIA,KAAK,EAAGsB,IAAI,IAAO,UAASA,IAAI,CAACZ,OAAQ,aAAYY,IAAI,CAACd,MAAO,EAAC;MAClEN,YAAY,EAAE,CAAC,YAAY;IAC/B,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEyB,qBAAqB;EAAEC,wBAAwB;EAAEC,mBAAmB;EAAEC,wBAAwB;EAAEC,sBAAsB;EAAEC;AAAwB,CAAC,GAAGxC,aAAa"},"metadata":{},"sourceType":"module"}