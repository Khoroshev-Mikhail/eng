{"ast":null,"code":"var _jsxFileName = \"/Users/tatanaarhipova/MikeIT/eng/src/Components/Methods/English/English.tsx\",\n  _s = $RefreshSig$();\nimport { useGetUnlernedQuery, useSetVocabularyMutation, useWrongAnswerMutation } from '../../../app/API/vocabulary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function English(props) {\n  _s();\n  const method = 'english';\n  const userId = 1;\n  const {\n    data,\n    isSuccess\n  } = useGetUnlernedQuery({\n    userId,\n    method,\n    groupId: props.id\n  });\n  const [setVocabulary] = useSetVocabularyMutation();\n  const [wrongAnswer] = useWrongAnswerMutation();\n  const defaultImg = 'https://flowbite.com/docs/images/blog/image-1.jpg';\n  const answer = id => {\n    if (data.trueVariant.id === id) {\n      setTimeout(() => setVocabulary({\n        userId,\n        method,\n        word_id: id\n      }), 1000);\n    } else {\n      wrongAnswer(1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full sm:w-96 mx-auto bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => alert('repeat audio'),\n          className: \"rounded-t-lg\",\n          src: '',\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"mb-2 text-center text-2xl font-bold tracking-tight text-gray-900 dark:text-white\",\n          children: data.trueVariant.eng\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 21\n        }, this), data.falseVariant.map((el, i) => {\n          return /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => answer(el.id),\n            type: \"button\",\n            className: \"text-green-700 py-4 my-4 w-full hover:text-white border border-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-green-500 dark:text-green-500 dark:hover:text-white dark:hover:bg-green-600 dark:focus:ring-green-800\",\n            children: el.rus\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 29\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(English, \"5B002+/uALqSnUIxMqnx9uYpSgg=\", false, function () {\n  return [useGetUnlernedQuery, useSetVocabularyMutation, useWrongAnswerMutation];\n});\n_c = English;\nvar _c;\n$RefreshReg$(_c, \"English\");","map":{"version":3,"names":["useGetUnlernedQuery","useSetVocabularyMutation","useWrongAnswerMutation","English","props","method","userId","data","isSuccess","groupId","id","setVocabulary","wrongAnswer","defaultImg","answer","trueVariant","setTimeout","word_id","alert","eng","falseVariant","map","el","i","rus"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/Components/Methods/English/English.tsx"],"sourcesContent":["import { Card, Image, Button } from 'semantic-ui-react'\nimport { useGetUnlernedQuery, useSetVocabularyMutation, useWrongAnswerMutation } from '../../../app/API/vocabulary'\nimport { Word, Group} from '../../../app/types/types'\nimport css from './english.module.css'\nexport default function English(props: Group){\n    const method = 'english'\n    const userId = 1\n    const { data, isSuccess } = useGetUnlernedQuery({userId, method, groupId: props.id})\n    const [ setVocabulary ] = useSetVocabularyMutation()\n    const [ wrongAnswer ] = useWrongAnswerMutation()\n    const defaultImg = 'https://flowbite.com/docs/images/blog/image-1.jpg'\n    const answer = (id: number) => {\n        if(data.trueVariant.id === id){\n            setTimeout(()=> setVocabulary({userId, method, word_id: id}), 1000)\n        } else{\n            wrongAnswer(1)\n        }\n    }\n    return(\n        <>  \n            {isSuccess && \n            <div className=\"w-full sm:w-96 mx-auto bg-white rounded-lg border border-gray-200 shadow-md dark:bg-gray-800 dark:border-gray-700\">\n                <a href=\"#\">\n                    <img onClick={()=>alert('repeat audio')} className=\"rounded-t-lg\" src={''} alt=\"\" />\n                </a>\n                <div className=\"p-5\">\n                    <h5 className=\"mb-2 text-center text-2xl font-bold tracking-tight text-gray-900 dark:text-white\">{data.trueVariant.eng}</h5>\n                    {data.falseVariant.map((el: Word, i: number) => {\n                        return (\n                            <button onClick={()=>answer(el.id)} key={i} type=\"button\" className=\"text-green-700 py-4 my-4 w-full hover:text-white border border-green-700 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center mr-2 mb-2 dark:border-green-500 dark:text-green-500 dark:hover:text-white dark:hover:bg-green-600 dark:focus:ring-green-800\">\n                                {el.rus}\n                            </button>\n                        )\n                    })} \n                </div>\n            </div>\n            }\n        </>\n    )\n}"],"mappings":";;AACA,SAASA,mBAAmB,EAAEC,wBAAwB,EAAEC,sBAAsB,QAAQ,6BAA6B;AAAA;AAAA;AAGnH,eAAe,SAASC,OAAO,CAACC,KAAY,EAAC;EAAA;EACzC,MAAMC,MAAM,GAAG,SAAS;EACxB,MAAMC,MAAM,GAAG,CAAC;EAChB,MAAM;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGR,mBAAmB,CAAC;IAACM,MAAM;IAAED,MAAM;IAAEI,OAAO,EAAEL,KAAK,CAACM;EAAE,CAAC,CAAC;EACpF,MAAM,CAAEC,aAAa,CAAE,GAAGV,wBAAwB,EAAE;EACpD,MAAM,CAAEW,WAAW,CAAE,GAAGV,sBAAsB,EAAE;EAChD,MAAMW,UAAU,GAAG,mDAAmD;EACtE,MAAMC,MAAM,GAAIJ,EAAU,IAAK;IAC3B,IAAGH,IAAI,CAACQ,WAAW,CAACL,EAAE,KAAKA,EAAE,EAAC;MAC1BM,UAAU,CAAC,MAAKL,aAAa,CAAC;QAACL,MAAM;QAAED,MAAM;QAAEY,OAAO,EAAEP;MAAE,CAAC,CAAC,EAAE,IAAI,CAAC;IACvE,CAAC,MAAK;MACFE,WAAW,CAAC,CAAC,CAAC;IAClB;EACJ,CAAC;EACD,oBACI;IAAA,UACKJ,SAAS,iBACV;MAAK,SAAS,EAAC,mHAAmH;MAAA,wBAC9H;QAAG,IAAI,EAAC,GAAG;QAAA,uBACP;UAAK,OAAO,EAAE,MAAIU,KAAK,CAAC,cAAc,CAAE;UAAC,SAAS,EAAC,cAAc;UAAC,GAAG,EAAE,EAAG;UAAC,GAAG,EAAC;QAAE;UAAA;UAAA;UAAA;QAAA;MAAG;QAAA;QAAA;QAAA;MAAA,QACpF,eACJ;QAAK,SAAS,EAAC,KAAK;QAAA,wBAChB;UAAI,SAAS,EAAC,kFAAkF;UAAA,UAAEX,IAAI,CAACQ,WAAW,CAACI;QAAG;UAAA;UAAA;UAAA;QAAA,QAAM,EAC3HZ,IAAI,CAACa,YAAY,CAACC,GAAG,CAAC,CAACC,EAAQ,EAAEC,CAAS,KAAK;UAC5C,oBACI;YAAQ,OAAO,EAAE,MAAIT,MAAM,CAACQ,EAAE,CAACZ,EAAE,CAAE;YAAS,IAAI,EAAC,QAAQ;YAAC,SAAS,EAAC,qUAAqU;YAAA,UACpYY,EAAE,CAACE;UAAG,GAD8BD,CAAC;YAAA;YAAA;YAAA;UAAA,QAEjC;QAEjB,CAAC,CAAC;MAAA;QAAA;QAAA;QAAA;MAAA,QACA;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ,iBAEP;AAEX;AAAC,GAnCuBpB,OAAO;EAAA,QAGCH,mBAAmB,EACrBC,wBAAwB,EAC1BC,sBAAsB;AAAA;AAAA,KAL1BC,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module"}