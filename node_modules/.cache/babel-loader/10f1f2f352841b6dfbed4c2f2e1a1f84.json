{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const getGroupThunk = createAsyncThunk('Thunk: getGroup', async function (id) {\n  const response = await fetch(`http://localhost:3002/groups/${id}`); //Потом здесб добавить пагинацию\n  const data = await response.json();\n  return {\n    group: data,\n    status: 'fulfilled'\n  };\n});\nconst initialState = {\n  status: 'loading',\n  group: {\n    id: 0,\n    title: '',\n    title_rus: '',\n    word_ids: []\n  }\n};\nexport const groupSlice = createSlice({\n  name: 'Slice: group',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getGroupThunk.fulfilled, (_, action) => action.payload);\n    builder.addCase(getGroupThunk.rejected, (_, __) => ({\n      ...initialState,\n      status: 'rejected'\n    }));\n  }\n});\nexport const getGroup = state => state.group;","map":{"version":3,"names":["createAsyncThunk","createSlice","getGroupThunk","id","response","fetch","data","json","group","status","initialState","title","title_rus","word_ids","groupSlice","name","reducers","extraReducers","builder","addCase","fulfilled","_","action","payload","rejected","__","getGroup","state"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/clientAPI/groupSliceAPI.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../store'\nimport { Group } from '../types/types'\n\ntype GroupState = {\n    status: 'loading' | 'pending' | 'fulfilled' | 'rejected',\n    group: Group,\n}\n\nexport const getGroupThunk = createAsyncThunk<GroupState, number>(\n    'Thunk: getGroup',\n    async function(id) {\n        const response = await fetch(`http://localhost:3002/groups/${id}`) //Потом здесб добавить пагинацию\n        const data = await response.json()\n        return { group: data, status: 'fulfilled' }\n    }\n)\n\nconst initialState: GroupState = {\n    status: 'loading',\n    group: {\n        id: 0,\n        title: '',\n        title_rus: '',\n        word_ids: []\n    }\n}\nexport const groupSlice = createSlice<GroupState, {}>({\n    name: 'Slice: group',\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder.addCase(getGroupThunk.fulfilled, (_, action) => action.payload)\n        builder.addCase(getGroupThunk.rejected, (_, __) => ({ ...initialState, status: 'rejected'}))\n    }\n})\nexport const getGroup = (state: RootState) => state.group"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAShE,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CACzC,iBAAiB,EACjB,gBAAeG,EAAE,EAAE;EACf,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gCAA+BF,EAAG,EAAC,CAAC,EAAC;EACnE,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;EAClC,OAAO;IAAEC,KAAK,EAAEF,IAAI;IAAEG,MAAM,EAAE;EAAY,CAAC;AAC/C,CAAC,CACJ;AAED,MAAMC,YAAwB,GAAG;EAC7BD,MAAM,EAAE,SAAS;EACjBD,KAAK,EAAE;IACHL,EAAE,EAAE,CAAC;IACLQ,KAAK,EAAE,EAAE;IACTC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE;EACd;AACJ,CAAC;AACD,OAAO,MAAMC,UAAU,GAAGb,WAAW,CAAiB;EAClDc,IAAI,EAAE,cAAc;EACpBL,YAAY;EACZM,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CAACC,OAAO,CAACjB,aAAa,CAACkB,SAAS,EAAE,CAACC,CAAC,EAAEC,MAAM,KAAKA,MAAM,CAACC,OAAO,CAAC;IACvEL,OAAO,CAACC,OAAO,CAACjB,aAAa,CAACsB,QAAQ,EAAE,CAACH,CAAC,EAAEI,EAAE,MAAM;MAAE,GAAGf,YAAY;MAAED,MAAM,EAAE;IAAU,CAAC,CAAC,CAAC;EAChG;AACJ,CAAC,CAAC;AACF,OAAO,MAAMiB,QAAQ,GAAIC,KAAgB,IAAKA,KAAK,CAACnB,KAAK"},"metadata":{},"sourceType":"module"}