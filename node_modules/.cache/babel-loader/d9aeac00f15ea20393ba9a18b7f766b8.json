{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nexport const groupsAPI = createApi({\n  reducerPath: 'groupsApi',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3002/'\n  }),\n  tagTypes: ['groups'],\n  endpoints: builder => ({\n    getGroups: builder.query({\n      query: () => `groups`,\n      providesTags: result => result ? [...result.map(_ref => {\n        let {\n          id\n        } = _ref;\n        return {\n          type: 'groups',\n          id\n        };\n      }), {\n        type: 'groups',\n        id: 'LIST'\n      }] : [{\n        type: 'groups',\n        id: 'LIST'\n      }],\n      transformResponse: resp => resp.sort((a, b) => a.id - b.id)\n    }),\n    setGroup: builder.mutation({\n      query: body => ({\n        url: `groups`,\n        method: 'POST',\n        body\n      }),\n      invalidatesTags: ['groups']\n    }),\n    deleteGroup: builder.mutation({\n      query: id => ({\n        url: `groups`,\n        method: 'DELETE',\n        body: {\n          id\n        }\n      }),\n      invalidatesTags: ['groups']\n    }),\n    putGroup: builder.mutation({\n      query: body => ({\n        url: `groups`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: ['groups']\n    }),\n    addWordToGroup: builder.mutation({\n      query: body => ({\n        url: `addWordToGroup`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: ['groups']\n    }),\n    deleteWordFromGroup: builder.mutation({\n      query: body => ({\n        url: `deleteWordFromGroup`,\n        method: 'PUT',\n        body\n      }),\n      invalidatesTags: ['groups']\n    }),\n    getGroupProgess: builder.query({\n      query: body => `groups/${body.groupId}/progress/${body.userId}`,\n      providesTags: result => result ? [...result.map(_ref2 => {\n        let {\n          id\n        } = _ref2;\n        return {\n          type: 'groups',\n          id\n        };\n      }), {\n        type: 'groups',\n        id: 'LIST'\n      }] : [{\n        type: 'groups',\n        id: 'LIST'\n      }]\n    })\n  })\n});\nexport const {\n  useGetGroupsQuery,\n  useSetGroupMutation,\n  useDeleteGroupMutation,\n  usePutGroupMutation,\n  useAddWordToGroupMutation,\n  useDeleteWordFromGroupMutation\n} = groupsAPI;","map":{"version":3,"names":["createApi","fetchBaseQuery","groupsAPI","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getGroups","query","providesTags","result","map","id","type","transformResponse","resp","sort","a","b","setGroup","mutation","body","url","method","invalidatesTags","deleteGroup","putGroup","addWordToGroup","deleteWordFromGroup","getGroupProgess","groupId","userId","useGetGroupsQuery","useSetGroupMutation","useDeleteGroupMutation","usePutGroupMutation","useAddWordToGroupMutation","useDeleteWordFromGroupMutation"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/app/API/groupsAPI.tsx"],"sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { Group } from '../types/types'\nexport const groupsAPI = createApi({\n    reducerPath: 'groupsApi',\n    baseQuery: fetchBaseQuery({baseUrl: 'http://localhost:3002/'}),\n    tagTypes: ['groups'],\n    endpoints: (builder) => ({\n        getGroups: builder.query<Group[], void>({\n            query: () =>  `groups`,\n            providesTags: (result) =>\n                result\n                ? [\n                    ...result.map(({ id }: any) => ({ type: 'groups' as const, id })),\n                    { type: 'groups', id: 'LIST' },\n                    ]\n                : [{ type: 'groups', id: 'LIST' }], \n            transformResponse: (resp: Group[]) => resp.sort((a: Group, b: Group) => a.id - b.id)\n        }),\n        setGroup: builder.mutation<void, {title: string, title_rus: string}>({\n            query: (body) => ({\n                url: `groups`,\n                method: 'POST',\n                body\n            }),\n            invalidatesTags: ['groups']\n        }),\n        deleteGroup: builder.mutation<void, number>({\n            query: (id) => ({\n                url: `groups`,\n                method: 'DELETE',\n                body: {id}\n            }),\n            invalidatesTags: ['groups']\n        }),\n        putGroup: builder.mutation<void, {id: number, title: string, title_rus: string}>({\n            query: (body) => ({\n                url: `groups`,\n                method: 'PUT',\n                body\n            }),\n            invalidatesTags: ['groups']\n        }),\n        addWordToGroup: builder.mutation<void, {id: number, word_id: number}>({\n            query: (body) => ({\n                url: `addWordToGroup`,\n                method: 'PUT',\n                body\n            }),\n            invalidatesTags: ['groups']\n        }),\n        deleteWordFromGroup: builder.mutation<void, {id: number, word_id: number}>({\n            query: (body) => ({\n                url: `deleteWordFromGroup`,\n                method: 'PUT',\n                body\n            }),\n            invalidatesTags: ['groups']\n        }),\n        getGroupProgess: builder.query<{english: number, russian: number, spelling: number, auding: number}, {groupId: number, userId: number}>({\n            query: (body) =>  `groups/${body.groupId}/progress/${body.userId}`,\n            providesTags: (result) =>\n                result\n                ? [\n                    ...result.map(({ id }: any) => ({ type: 'groups' as const, id })),\n                    { type: 'groups', id: 'LIST' },\n                    ]\n                : [{ type: 'groups', id: 'LIST' }], \n        }),\n    })\n})\n\nexport const { useGetGroupsQuery, useSetGroupMutation, useDeleteGroupMutation, usePutGroupMutation, useAddWordToGroupMutation, useDeleteWordFromGroupMutation } = groupsAPI"],"mappings":"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"},"metadata":{},"sourceType":"module"}