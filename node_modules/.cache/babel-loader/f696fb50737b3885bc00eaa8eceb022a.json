{"ast":null,"code":"var _jsxFileName = \"/Users/tatanaarhipova/MikeIT/eng/src/Components/References/ReferencesGroup.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport TextCard from \"../Texts/TextCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function ReferencesGroup(props) {\n  _s();\n  const [references, setReferences] = useState({\n    group: null,\n    text: null,\n    audio: null,\n    video: null\n  });\n  useEffect(() => {\n    if (typeof props.groupId === 'number' && props.groupId > 0) {\n      fetch(`http://localhost:3002/groups/${props.groupId}/references`).then(response => {\n        return response.json();\n      }).then(response => {\n        if (response.group || response.text || response.video || response.audio) {\n          setReferences(response);\n        }\n      }).catch(err => {\n        setReferences({\n          group: null,\n          text: null,\n          audio: null,\n          video: null\n        });\n      });\n    }\n  }, [props]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: references.text && /*#__PURE__*/_jsxDEV(TextCard, {\n      ...references.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 33\n    }, this)\n  }, void 0, false)\n  // Здесь отдельно карточки с грамматикой если есть\n  ;\n}\n_s(ReferencesGroup, \"WFr8y1VNbnnAUHmV0OKhMQCJSWE=\");\n_c = ReferencesGroup;\nvar _c;\n$RefreshReg$(_c, \"ReferencesGroup\");","map":{"version":3,"names":["useEffect","useState","TextCard","ReferencesGroup","props","references","setReferences","group","text","audio","video","groupId","fetch","then","response","json","catch","err"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/Components/References/ReferencesGroup.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ReferencesCard } from \"../../app/types/types\";\nimport TextCard from \"../Texts/TextCard\";\n\nexport function ReferencesGroup(props : { groupId?: number }){\n    const [ references, setReferences ] = useState<ReferencesCard>({ group: null, text: null, audio: null, video: null })\n    useEffect(()=>{\n        if(typeof props.groupId === 'number' && props.groupId > 0){\n            fetch(`http://localhost:3002/groups/${props.groupId}/references`)\n            .then( response => {\n                return response.json()\n            })\n            .then((response: ReferencesCard ) =>{\n                if(response.group || response.text || response.video || response.audio){\n                    setReferences(response)\n                }\n            })\n            .catch(err => {\n               setReferences({ group: null, text: null, audio: null, video: null })\n            })\n        }\n    }, [ props ])\n    return (\n        <>\n            {references.text && <TextCard {...references.text}/>}\n        </>\n        // Здесь отдельно карточки с грамматикой если есть\n    )\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,OAAOC,QAAQ,MAAM,mBAAmB;AAAC;AAAA;AAEzC,OAAO,SAASC,eAAe,CAACC,KAA4B,EAAC;EAAA;EACzD,MAAM,CAAEC,UAAU,EAAEC,aAAa,CAAE,GAAGL,QAAQ,CAAiB;IAAEM,KAAK,EAAE,IAAI;IAAEC,IAAI,EAAE,IAAI;IAAEC,KAAK,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAK,CAAC,CAAC;EACrHV,SAAS,CAAC,MAAI;IACV,IAAG,OAAOI,KAAK,CAACO,OAAO,KAAK,QAAQ,IAAIP,KAAK,CAACO,OAAO,GAAG,CAAC,EAAC;MACtDC,KAAK,CAAE,gCAA+BR,KAAK,CAACO,OAAQ,aAAY,CAAC,CAChEE,IAAI,CAAEC,QAAQ,IAAI;QACf,OAAOA,QAAQ,CAACC,IAAI,EAAE;MAC1B,CAAC,CAAC,CACDF,IAAI,CAAEC,QAAwB,IAAK;QAChC,IAAGA,QAAQ,CAACP,KAAK,IAAIO,QAAQ,CAACN,IAAI,IAAIM,QAAQ,CAACJ,KAAK,IAAII,QAAQ,CAACL,KAAK,EAAC;UACnEH,aAAa,CAACQ,QAAQ,CAAC;QAC3B;MACJ,CAAC,CAAC,CACDE,KAAK,CAACC,GAAG,IAAI;QACXX,aAAa,CAAC;UAAEC,KAAK,EAAE,IAAI;UAAEC,IAAI,EAAE,IAAI;UAAEC,KAAK,EAAE,IAAI;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;MACvE,CAAC,CAAC;IACN;EACJ,CAAC,EAAE,CAAEN,KAAK,CAAE,CAAC;EACb,oBACI;IAAA,UACKC,UAAU,CAACG,IAAI,iBAAI,QAAC,QAAQ;MAAA,GAAKH,UAAU,CAACG;IAAI;MAAA;MAAA;MAAA;IAAA;EAAG;EAExD;EAAA;AAER;AAAC,GAxBeL,eAAe;AAAA,KAAfA,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module"}