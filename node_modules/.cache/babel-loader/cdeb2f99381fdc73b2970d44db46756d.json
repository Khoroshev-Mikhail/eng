{"ast":null,"code":"var _jsxFileName = \"/Users/tatanaarhipova/MikeIT/eng/src/AdminComponents/AdminWords/AdminWords.tsx\",\n  _s = $RefreshSig$();\nimport { Checkbox, Table } from \"flowbite-react\";\nimport { useGetAllWordsQuery } from \"../../app/API/wordAPI\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AdminWords() {\n  _s();\n  const {\n    data,\n    isSuccess\n  } = useGetAllWordsQuery();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      hoverable: true,\n      children: [/*#__PURE__*/_jsxDEV(Table.Head, {\n        children: [/*#__PURE__*/_jsxDEV(Table.HeadCell, {\n          className: \"!p-4\",\n          children: /*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Table.HeadCell, {\n          children: \"English\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Table.HeadCell, {\n          children: \"Russian\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Table.HeadCell, {\n          children: \"Groups\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Table.HeadCell, {\n          children: \"Price\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Table.HeadCell, {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sr-only\",\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table.Body, {\n        className: \"divide-y\",\n        children: isSuccess && data.map((word, i) => {\n          return /*#__PURE__*/_jsxDEV(Table.Row, {\n            className: \"bg-white dark:border-gray-700 dark:bg-gray-800\",\n            children: [/*#__PURE__*/_jsxDEV(Table.Cell, {\n              className: \"!p-4\",\n              children: /*#__PURE__*/_jsxDEV(Checkbox, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 34,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n              className: \"whitespace-nowrap font-medium text-gray-900 dark:text-white\",\n              children: word.eng\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n              children: word.rus\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n              children: \"2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n              children: \"$2999\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: \"/tables\",\n                className: \"font-medium text-blue-600 hover:underline dark:text-blue-500\",\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n_s(AdminWords, \"MJeDdha5IXGNMka3At6PTTubp2A=\", false, function () {\n  return [useGetAllWordsQuery];\n});\n_c = AdminWords;\nvar _c;\n$RefreshReg$(_c, \"AdminWords\");","map":{"version":3,"names":["Checkbox","Table","useGetAllWordsQuery","AdminWords","data","isSuccess","map","word","i","eng","rus"],"sources":["/Users/tatanaarhipova/MikeIT/eng/src/AdminComponents/AdminWords/AdminWords.tsx"],"sourcesContent":["import { Checkbox, Table } from \"flowbite-react\"\nimport { useGetAllWordsQuery } from \"../../app/API/wordAPI\"\nimport { Word } from \"../../app/types/types\"\n\n\nexport default function AdminWords(){\n    const {data, isSuccess} = useGetAllWordsQuery()\n    return (\n        <div>\n            \n            <Table hoverable={true}>\n                <Table.Head>\n                    <Table.HeadCell className=\"!p-4\">\n                    <Checkbox />\n                    </Table.HeadCell>\n                    <Table.HeadCell>English</Table.HeadCell>\n                    <Table.HeadCell>Russian</Table.HeadCell>\n                    <Table.HeadCell>Groups</Table.HeadCell>\n                    <Table.HeadCell>\n                    Price\n                    </Table.HeadCell>\n                    <Table.HeadCell>\n                    <span className=\"sr-only\">\n                        Edit\n                    </span>\n                    </Table.HeadCell>\n                </Table.Head>\n                <Table.Body className=\"divide-y\">\n                {isSuccess && \n                data.map((word: Word, i: number) => {\n                        return (\n                            <Table.Row className=\"bg-white dark:border-gray-700 dark:bg-gray-800\">\n                                <Table.Cell className=\"!p-4\">\n                                    <Checkbox />\n                                </Table.Cell>\n                                <Table.Cell className=\"whitespace-nowrap font-medium text-gray-900 dark:text-white\">\n                                    {word.eng}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    {word.rus}\n                                </Table.Cell>\n                                <Table.Cell>\n                                    2\n                                </Table.Cell>\n                                <Table.Cell>\n                                    $2999\n                                </Table.Cell>\n                                <Table.Cell>\n                                    <a\n                                    href=\"/tables\"\n                                    className=\"font-medium text-blue-600 hover:underline dark:text-blue-500\"\n                                    >\n                                    Edit\n                                    </a>\n                                </Table.Cell>\n                            </Table.Row>\n                        )\n                    })\n                }\n                </Table.Body>\n                </Table>\n        </div>\n    )\n}"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAChD,SAASC,mBAAmB,QAAQ,uBAAuB;AAAA;AAI3D,eAAe,SAASC,UAAU,GAAE;EAAA;EAChC,MAAM;IAACC,IAAI;IAAEC;EAAS,CAAC,GAAGH,mBAAmB,EAAE;EAC/C,oBACI;IAAA,uBAEI,QAAC,KAAK;MAAC,SAAS,EAAE,IAAK;MAAA,wBACnB,QAAC,KAAK,CAAC,IAAI;QAAA,wBACP,QAAC,KAAK,CAAC,QAAQ;UAAC,SAAS,EAAC,MAAM;UAAA,uBAChC,QAAC,QAAQ;YAAA;YAAA;YAAA;UAAA;QAAG;UAAA;UAAA;UAAA;QAAA,QACK,eACjB,QAAC,KAAK,CAAC,QAAQ;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAyB,eACxC,QAAC,KAAK,CAAC,QAAQ;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAyB,eACxC,QAAC,KAAK,CAAC,QAAQ;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAwB,eACvC,QAAC,KAAK,CAAC,QAAQ;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAEE,eACjB,QAAC,KAAK,CAAC,QAAQ;UAAA,uBACf;YAAM,SAAS,EAAC,SAAS;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAElB;UAAA;UAAA;UAAA;QAAA,QACU;MAAA;QAAA;QAAA;QAAA;MAAA,QACR,eACb,QAAC,KAAK,CAAC,IAAI;QAAC,SAAS,EAAC,UAAU;QAAA,UAC/BG,SAAS,IACVD,IAAI,CAACE,GAAG,CAAC,CAACC,IAAU,EAAEC,CAAS,KAAK;UAC5B,oBACI,QAAC,KAAK,CAAC,GAAG;YAAC,SAAS,EAAC,gDAAgD;YAAA,wBACjE,QAAC,KAAK,CAAC,IAAI;cAAC,SAAS,EAAC,MAAM;cAAA,uBACxB,QAAC,QAAQ;gBAAA;gBAAA;gBAAA;cAAA;YAAG;cAAA;cAAA;cAAA;YAAA,QACH,eACb,QAAC,KAAK,CAAC,IAAI;cAAC,SAAS,EAAC,6DAA6D;cAAA,UAC9ED,IAAI,CAACE;YAAG;cAAA;cAAA;cAAA;YAAA,QACA,eACb,QAAC,KAAK,CAAC,IAAI;cAAA,UACNF,IAAI,CAACG;YAAG;cAAA;cAAA;cAAA;YAAA,QACA,eACb,QAAC,KAAK,CAAC,IAAI;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAEE,eACb,QAAC,KAAK,CAAC,IAAI;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA,QAEE,eACb,QAAC,KAAK,CAAC,IAAI;cAAA,uBACP;gBACA,IAAI,EAAC,SAAS;gBACd,SAAS,EAAC,8DAA8D;gBAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAGpE;cAAA;cAAA;cAAA;YAAA,QACK;UAAA;YAAA;YAAA;YAAA;UAAA,QACL;QAEpB,CAAC;MAAC;QAAA;QAAA;QAAA;MAAA,QAEO;IAAA;MAAA;MAAA;MAAA;IAAA;EACL;IAAA;IAAA;IAAA;EAAA,QACV;AAEd;AAAC,GA1DuBP,UAAU;EAAA,QACJD,mBAAmB;AAAA;AAAA,KADzBC,UAAU;AAAA;AAAA"},"metadata":{},"sourceType":"module"}